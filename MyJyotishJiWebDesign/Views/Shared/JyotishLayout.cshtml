<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<title>My Jyotish G</title>
	<meta content="width=device-width, initial-scale=1.0" name="viewport">
	<meta content="" name="keywords">
	<meta content="" name="description">
	<link rel="stylesheet" href="https://cdn.datatables.net/1.12.1/css/jquery.dataTables.min.css">


	<!-- Favicon -->
	<link href="img/favicon.ico" rel="icon">
	<!-- Google Web Fonts -->
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Heebo:wght@400;500;600;700&display=swap" rel="stylesheet">

	<!-- Icon Font Stylesheet -->
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

	<!-- Customized Bootstrap Stylesheet -->
	<link href="~/css/bootstrap.min.css" rel="stylesheet">

	<!-- Template Stylesheet -->
	<link href="~/summernote/dist/summernote.css" rel="stylesheet" />

	<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
	<script src="~/assets/js/plugin/webfont/webfont.min.js"></script>

	<script>
		WebFont.load({
			google: { families: ["Public Sans:300,400,500,600,700"] },
			custom: {
				families: [
					"Font Awesome 5 Solid",
					"Font Awesome 5 Regular",
					"Font Awesome 5 Brands",
					"simple-line-icons",
				],
				urls: ["assets/css/fonts.css"],
			},
			active: function () {
				sessionStorage.fonts = true;
			},
		});
	</script>

	<!-- CSS Files -->
	<link rel="stylesheet" href="~/assets/css/plugins.min.css" />
	<link rel="stylesheet" href="~/assets/css/kaiadmin.min.css" />

	<!-- CSS Just for demo purpose, don't include it in your project -->
	<link rel="stylesheet" href="~/assets/css/demo.css" />
	<link href="~/bootstrap-datepicker/bootstrap-datepicker.min.css" rel="stylesheet" />
	<!-- Include Select2 JS -->
	<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script src="~/assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>
	<script src="~/bootstrap-datepicker/bootstrap-datepicker.min.js"></script>
	<script defer src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

	<style>

		.table > thead {
			vertical-align: bottom;
			background: #009cff;
			color: white;
		}

		.table {
			font-size: 12px !important;
		}

		.disable_link {
			color: gray;
		}



		.uplogo {
			height: 0px !important;
			text-align: center;
			line-height: 40px;
		}


		.Platinum {
			color: white !important;
			background-color: #00DBDE;
			background-image: linear-gradient(90deg, #00DBDE 0%, #FC00FF 100%);
		}

		.Gold {
			color: white !important;
			background-color: #FBAB7E;
			background-image: linear-gradient(62deg, #FBAB7E 0%, #F7CE68 100%);
		}

		.Silver {
			color: white !important;
			background-color: #8BC6EC;
			background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);
		}

		.alert {
			z-index: 10000;
		}

		.btn-primary {
			color: white !important;
		}

		::-webkit-scrollbar {
			width: 5px;
			height: 5px;
		}

		::-webkit-scrollbar-thumb {
			background: silver;
			border-radius: 10px;
		}

		.showMessageCount {
			right: 0;
		}

		.toast-container {
			bottom: 40px;
			z-index: 10000;
		}

		.chat-modal-body {
			height: 60vh;
			max-height: 650px;
			overflow-y: auto;
			background: url(/chatbg.jpg), #716c6c61;
			background-size: contain;
			background-position: center;
			background-attachment: fixed;
			background-blend-mode: darken;
		}

		.chat-history {
			padding: 15px;
		}

		.message {
			margin-bottom: 10px;
			padding: 10px;
			border-radius: 5px;
			max-width: 50%;
			clear: both;
			word-wrap: break-word;
		}

			.message.sent {
				background-color: #007bff; /* Bootstrap primary color */
				color: white;
				margin-left: auto; /* Align to the right */
			}

			.message.received {
				background-color: #e9ecef; /* Light gray for received messages */
				color: black;
				margin-right: auto; /* Align to the left */
			}

		.input-group {
			position: relative;
		}


		#ChatModal {
			z-index: 10000;
		}

		.fa-location-arrow {
			transform: rotate(44deg);
		}

		.messageInpBox {
			padding: 10px;
			font-size: 20px;
			outline: none !important;
			box-shadow: none !important;
		}

		.chat-modal-body::-webkit-scrollbar {
			width: 4px;
			height: 4px;
		}

		.chat-modal-body::-webkit-scrollbar-thumb {
			border-radius: 10px;
			background: skyblue;
		}

		.swal2-container {
			z-index: 100000000;
		}

		#zego-container {
			z-index: 10000000000000000 !important;
		}

		.chatFooter {
			background: #e3ded5;
		}

		.text-rebec, .gg-more-vertical-alt, .gg-menu-right {
			color: rebeccapurple !important;
		}
		.call-container {
		background-color: #ffffff;
		border-radius: 15px;
		width: 360px;
		padding: 20px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
		top:50%;
		left:50%;
		margin:120px auto;
	}

	.call-info {
		font-size: 16px;
		margin-top: 10px;
		color: #333;
		margin-bottom: 20px;
	}

	.call-buttons {
		display: flex;
		justify-content: space-evenly;
		width: 100%;
	}

		.call-buttons button {
			background-color: #4CAF50;
			color: white;
			border: none;
			border-radius: 50%;
			width: 60px;
			height: 60px;
			font-size: 18px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

			.call-buttons button:disabled {
				background-color: #ccc;
			}

			.call-buttons button:hover {
				background-color: #45a049;
			}

	.audio-container {
		margin-top: 20px;
		width: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	#remoteAudio {
		width: 100%;
		height: 60px;
		background-color: #eee;
		border-radius: 8px;
		margin-bottom: 10px;
		display: block;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
	}

	.call-status {
		font-size: 18px;
		color: #ff5722;
		font-weight: bold;
	}

	.receiver-input {
		width: 100%;
		margin-bottom: 10px;
	}

	.receiver-info {
		font-size: 14px;
		color: #555;
	}

	.call-BackContainer{
top:0;
z-index:10000000000000000000;
	}
		/* Fullscreen background */
		.loader-continer-for-call {
			height: 100vh;
			width: 100vw;
			display: flex;
			justify-content: center;
			align-items: center;
			background: linear-gradient(135deg, black, gray);
			overflow: hidden;
			position: fixed;
			top: 0;
			left: 0;
			z-index: 10000000000000000000;
		}

		/* Loader container */
		.call-loader {
			position: relative;
			width: 150px;
			height: 150px;
		}


		/* Central glowing orb */
		.orb {
			position: absolute;
			top: 50%;
			left: 50%;
			width: 30px;
			height: 30px;
			background: #00d1ff;
			border-radius: 50%;
			box-shadow: 0 0 15px #00d1ff, 0 0 30px #00d1ff, 0 0 60px rgba(0, 209, 255, 0.5);
			transform: translate(-50%, -50%);
			animation: pulse 2s infinite ease-in-out;
		}

		/* Pulsating waves */
		.wave {
			position: absolute;
			top: 50%;
			left: 50%;
			width: 100%;
			height: 100%;
			background: none;
			border: 2px solid rgba(0, 209, 255, 0.5);
			border-radius: 50%;
			transform: translate(-50%, -50%) scale(0);
			animation: expand 3s infinite ease-in-out;
		}

			.wave:nth-child(2) {
				animation-delay: 1s;
			}

			.wave:nth-child(3) {
				animation-delay: 2s;
			}

		/* Animations */
		@@keyframes pulse {
			0%, 100% {
				transform: translate(-50%, -50%) scale(1);
			}

			50% {
				transform: translate(-50%, -50%) scale(1.2);
			}
		}

		@@keyframes expand {
			0% {
				transform: translate(-50%, -50%) scale(0);
				opacity: 1;
			}

			100% {
				transform: translate(-50%, -50%) scale(1.5);
				opacity: 0;
			}
		}
	</style>
</head>

<body>
	@* alert box*@
	<div class="alert-box alert alert-danger d-none position-fixed  w-100" role="alert">
		<div>
			<i class="fas fa-exclamation-circle"></i>
			&nbsp;<span class="alert-content"></span>
		</div>
	</div>

	<div class="d-none loader-continer-for-call">
		<div class="call-loader">
			<div class="orb"></div>
			<div class="wave"></div>
			<div class="wave"></div>
			<div class="wave"></div>
		</div>
	</div>

	<div class="wrapper">

		<!-- Sidebar -->

		<div class="sidebar" data-background-color="light">
			<div class="sidebar-logo">
				<!-- Logo Header -->
				<div class="logo-header" data-background-color="light">
					<a href="/jyotish/dashboard" class="logo">
						<img src="https://api.myjyotishg.in/Images/Logo.png"
							 alt="navbar brand"
							 class="navbar-brand"
							 height="50" />
					</a>
					<div class="nav-toggle">
						<button class="btn btn-toggle toggle-sidebar">
							<i class="gg-menu-right"></i>
						</button>
						<button class="btn btn-toggle sidenav-toggler">
							<i class="gg-menu-left"></i>
						</button>
					</div>
					<button class="topbar-toggler more">
						<i class="gg-more-vertical-alt"></i>
					</button>
				</div>
				<!-- End Logo Header -->
			</div>
			<div class="sidebar-wrapper scrollbar scrollbar-inner">
				<div class="sidebar-content">
					<ul class="nav nav-secondary">
						<li class="nav-item active">
							<a data-bs-toggle="collapse"
							   href="#dashboard"
							   class="collapsed"
							   aria-expanded="false">
								<i class="fas fa-home"></i>
								<p>Dashboard</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="dashboard">
								<ul class="nav nav-collapse">
									<li>
										<a href="/Jyotish/Dashboard">
											<span class="sub-item">Dashboard</span>
										</a>
									</li>
								</ul>
							</div>
						</li>

						<li class="nav-item">
							<a data-bs-toggle="collapse" href="#forms">
								<i class="fas fa-pen-square"></i>
								<p>Features</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="forms">
								<ul class="nav nav-collapse">
									<li>
										<a class="featureValidation" href="/Jyotish/AppointmentSlot">
											<span class="sub-item">Appointment Slots</span>
										</a>
									</li>
									<li>
										<a class="featureValidation" href="/Jyotish/AddAppointment">
											<span class="sub-item">Book Appointment</span>
										</a>
									</li>
									<li>
										<a class="featureValidation" href="/Jyotish/Gallery">
											<span class="sub-item">Add Gallery</span>
										</a>
									</li>
									<li>
										<a class="featureValidation" href="/Jyotish/Video">
											<span class="sub-item">Add Videos</span>
										</a>
									</li>
									<li>
										<a class="featureValidation" href="/Jyotish/pooja">
											<span class="sub-item">Pooja</span>
										</a>
									</li>
									<li>
										<a class="featureValidation" href="/Jyotish/TeamMembers">
											<span class="sub-item">Add TeamMembers</span>
										</a>
									</li>
								</ul>
							</div>
						</li>
						<li class="nav-item">
							<a data-bs-toggle="collapse" href="#sidebarLayouts">
								<i class="fas fa-th-list"></i>
								<p>Appointments</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="sidebarLayouts">
								<ul class="nav nav-collapse">

									<li>
										<a href="/Jyotish/UpcomingAppointment">
											<span class="sub-item">Upcomming Appointments</span>
										</a>
									</li>
									<li>
										<a href="/Jyotish/AppointmentHistory">
											<span class="sub-item">Appointments History</span>
										</a>
									</li>

								</ul>
							</div>
						</li>
						<li class="nav-item">
							<a data-bs-toggle="collapse" href="#poojas">
								<i class="fas fa-praying-hands"></i>
								<p>Pooja Records</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="poojas">
								<ul class="nav nav-collapse">
									<li>
										<a href="/Jyotish/BookedPooja">
											<span class="sub-item">Pooja Requests</span>
										</a>
									</li>
									<li>
										<a href="/Jyotish/BookedPoojaHistory">
											<span class="sub-item">Pooja History</span>
										</a>
									</li>

								</ul>
							</div>
						</li>
						<li class="nav-item">
							<a data-bs-toggle="collapse" href="#advertisement">
								<i class="fas fa-ad"></i>
								<p>Advertisement</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="advertisement">
								<ul class="nav nav-collapse">
									<li>
										<a href="/Jyotish/AdvertisementPlan">
											<span class="sub-item">Advertisement Plans</span>
										</a>
									</li>
									<li>
										<a href="/Jyotish/AdvertisementStatus">
											<span class="sub-item">Advertisement Status</span>
										</a>
									</li>

								</ul>
							</div>
						</li>
						<li class="nav-item">
							<a data-bs-toggle="collapse" href="#tables">
								<i class="fas fa-table"></i>
								<p>Packages</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="tables">
								<ul class="nav nav-collapse">
									<li>
										<a href="/Jyotish/Subscription">
											<span class="sub-item">Packages</span>
										</a>
									</li>

								</ul>
							</div>
						</li>

						<li class="nav-item">
							<a data-bs-toggle="collapse" href="#maps">
								<i class="fas fa-file-alt"></i>
								<p>Reports</p>
								<span class="caret"></span>
							</a>
							<div class="collapse" id="maps">
								<ul class="nav nav-collapse">
									<li>
										<a href="maps/googlemaps.html">
											<span class="sub-item">Google Maps</span>
										</a>
									</li>
									<li>
										<a href="maps/jsvectormap.html">
											<span class="sub-item">Jsvectormap</span>
										</a>
									</li>
								</ul>
							</div>
						</li>
					</ul>
				</div>
			</div>
		</div>
		<div class="main-panel">
			<div class="main-header">
				<div class="main-header-logo">
					<!-- Logo Header -->
					<div class="logo-header" data-background-color="dark">
						<a href="/Jyotish/Dashboard" class="logo">
							<img src="https://api.myjyotishg.in/Images/Logo.png"
								 alt="navbar brand"
								 class="navbar-brand"
								 height="20" />
						</a>
						<div class="nav-toggle">
							<button class="btn btn-toggle toggle-sidebar">
								<i class="gg-menu-right"></i>
							</button>
							<button class="btn btn-toggle sidenav-toggler">
								<i class="gg-menu-left"></i>
							</button>
						</div>
						<button class="topbar-toggler more">
							<i class="gg-more-vertical-alt"></i>
						</button>
					</div>
					<!-- End Logo Header -->
				</div>
				<!-- Navbar Header -->
				<nav class="navbar navbar-header navbar-header-transparent navbar-expand-lg border-bottom">
					<div class="container-fluid">
						<nav class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex">

						</nav>

						<ul class="navbar-nav topbar-nav ms-md-auto align-items-center">
							<li class="nav-item">
								<a href="#" class="nav-link">
									<span class="d-none d-lg-inline-flex justify-content-center gap-2 align-items-center userPlan p-2 rounded">Free User</span>
								</a>
							</li>
							<li class="nav-item topbar-icon dropdown hidden-caret position-relative">
								<a class="nav-link dropdown-toggle"
								   href="#"
								   id="messageDropdown"
								   role="button"
								   data-bs-toggle="dropdown"
								   aria-haspopup="true"
								   aria-expanded="false">
									<i class="fa fa-envelope"></i>
									<span class="bg-danger text-light position-absolute showMessageCount top-0 fs-6 px-1 rounded-circle"></span>
								</a>
								<ul class="dropdown-menu messages-notif-box animated fadeIn"
									aria-labelledby="messageDropdown">
									<li>
										<div class="dropdown-title d-flex justify-content-between align-items-center">
											Messages
										</div>
									</li>
									<li>
										<div class="message-notif-scroll scrollbar-outer">
											<div class="notif-center" id="messageContainer">
											</div>
										</div>
									</li>
									<li>
										<a class="see-all" href="javascript:void(0);">
											See all messages<i class="fa fa-angle-right"></i>
										</a>
									</li>
								</ul>
							</li>
							<li class="nav-item topbar-icon dropdown hidden-caret">
								<a class="nav-link dropdown-toggle"
								   href="#"
								   id="notifDropdown"
								   role="button"
								   data-bs-toggle="dropdown"
								   aria-haspopup="true"
								   aria-expanded="false">
									<i class="fa fa-bell"></i>
									<span class="notification">5</span>
								</a>
								<ul class="dropdown-menu notif-box animated fadeIn"
									aria-labelledby="notifDropdown">
									<li>
										<div class="dropdown-title">
											Booked Appointment
										</div>
									</li>
									<li>
										<div class="notif-scroll scrollbar-outer">
											<div class="notif-center" id="notificationData">
											</div>
										</div>
									</li>
									<li>
										<a class="see-all" href="javascript:void(0);">
											See all notifications<i class="fa fa-angle-right"></i>
										</a>
									</li>
								</ul>
							</li>

							<li class="nav-item topbar-user dropdown hidden-caret">
								<a class="dropdown-toggle profile-pic"
								   data-bs-toggle="dropdown"
								   href="#"
								   aria-expanded="false">
									<div class="avatar-sm">
										<img src="/user-not-found.png"
											 alt="..."
											 class="avatar-img rounded-circle userProfile" />
									</div>
									<span class="profile-username">
										<span class="op-7">Hi,</span>
										<span class="fw-bold userName"></span>
									</span>
								</a>
								<ul class="dropdown-menu dropdown-user animated fadeIn">
									<div class="dropdown-user-scroll scrollbar-outer">
									<li>
										<div class="user-box">
											<div class="avatar-lg">
												<img src="/user-not-found.png"
													 alt="image profile"
													 class="avatar-img rounded userProfile" />
											</div>
											<div class="u-text">
												<h4 class="userName" id="userProfileName">User</h4>
												<p class="text-muted userEmail">hello@example.com</p>
												<a href="/Jyotish/Profile"
												   class="btn btn-xs btn-secondary btn-sm">View Profile</a>
											</div>
										</div>
									</li>
									<li>
										<div class="dropdown-divider"></div>
										<a class="dropdown-item" href="/Jyotish/Profile">My Profile</a>
										<a class="dropdown-item" href="/Jyotish/wallets">My Balance</a>
										<a class="dropdown-item" href="/jyotish/GetServiceRevord">Service Records</a>
										<div class="dropdown-divider"></div>
										<a class="dropdown-item" id="logout">Logout</a>
									</li>
								</ul>
							</li>
						</ul>

					</div>

				</nav>
				<!-- End Navbar -->
			</div>

			<!--show user request for chat-->
			<div class="toast-container d-none position-fixed  end-0 p-3">
				<div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
					<div class="toast-header">
						<img src="..." id="userImage" height="50" width="50" class="rounded me-2" alt="...">
						<strong class="me-auto" id="userNameForchat"></strong>
						<small id="requestDateTime"></small>
						<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
					</div>
					<div class="toast-body d-flex justify-content-between">
						<span id="requestMessage"></span>
						<button class="btn btn-success" role="button" id="AcceptChatRequest">Accept</button>
					</div>
				</div>
			</div>
			<!-- Content Start -->


			<script>
				var BaseUrl = "https://api.myjyotishg.in/"
				//var BaseUrl = "https://localhost:7118/"
			</script>

			<div class="container">
				<div class="page-inner">
					@RenderBody()
				</div>

			</div>

			<!-- Footer Start -->
			<footer class="footer">
				<div class="container-fluid d-flex justify-content-between">
					<nav class="pull-left">
						<ul class="nav">
							<li class="nav-item">
								<a class="nav-link" href="https://myjyotishg.in">
									myjyotishg
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#"> Help </a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#"> Licenses </a>
							</li>
						</ul>
					</nav>
					<div class="copyright">
						&copy; <a href="">myjyotishg</a>, All Right Reserved. Designed By <a href="https://macreel.co.in">Macreel Infosoft</a>
					</div>
					<div>
						Created by
						<a target="_blank" href="https://themewagon.com/">macreel</a>.
					</div>
				</div>
			</footer>
			<!-- Footer End -->
		</div>
		<!-- Content End -->
	</div>
	<div class="modal fade" id="ChatModal" tabindex="-1" data-bs-backdrop="static" aria-labelledby="ChatModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header bg-success">
					<div class="d-flex align-items-center">
						<img id="userhdetailschatheader" height="50" width="50" class="rounded-circle border" src="~/user-not-found.png" alt="user profile" />
						<h1 class="modal-title fs-5 ms-2" id="ChatModalLabel"></h1>
						&nbsp;&nbsp;&nbsp;
						<span id="chatTimer" class="border rounded px-3">
						</span>
					</div>
					<button type="button" class="btn-close" id="exitFromChat"></button>
				</div>
				<div class="modal-body chat-modal-body">
					<div class="chat-history">
					</div>
				</div>
				<div class="modal-footer chatFooter">
					<form class="w-100" id="messageForm">
						<div class="input-group mt-3">
							<input type="text" class="form-control rounded-start messageInpBoxs" placeholder="Type your message..." aria-label="User 's message">
							<button disabled class="btn btn-primary rounded-end" id="sendMessageBtn" type="submit"><i class="fas fs-5 fa-location-arrow"></i></button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>

	<div class="vw-100 vh-100 justify-content-center  d-none align-items-center bg-dark call-BackContainer position-fixed">
		<div class="call-container shadow">
			<!-- Display call info -->
			<div class="call-info">
				<div class="text-center mb-3">
					<img src="/user-not-found.png" id="jyotishCallImg" height="100" width="100" class="rounded-circle" />
				</div>
				<div id="receiverInfo" class="receiver-info fw-bold">
					User
				</div>
				<div id="audioDuration" class="audio-duration border rounded mt-2 px-2 py-1">00:00</div>
				<!-- Add real-time audio duration display here -->
			</div>

			<!-- Buttons for starting and ending the call -->
			<div class="call-buttons my-4">
				<button role="button" id="endCallBtn" class="bg-danger text-light" title="End Call" disabled><i class="fas fa-phone-alt"></i></button>
				<button role="button" id="muteCallBtn" class="bg-warning text-light" title="Mute/Unmute Call" disabled><i class="fas fa-microphone"></i></button>
			</div>

			<!-- Audio container for remote audio -->
			<div class="audio-container">
				<audio id="remoteAudio" hidden autoplay controls></audio>
				<div class="call-status" id="callStatus">Waiting for call...</div>
			</div>
		</div>
	</div>

	<script src="~/assets/js/core/jquery-3.7.1.min.js"></script>
	<!-- <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>-->
	<!-- Include DataTables JS -->
	<script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>

	<!-- JavaScript Libraries -->

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/assets/js/core/popper.min.js"></script>
	<!-- jQuery Scrollbar -->
	<script src="~/assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

	<!-- Chart JS -->
	<script src="~/assets/js/plugin/chart.js/chart.min.js"></script>

	<!-- jQuery Sparkline -->
	<script src="~/assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

	<!-- Chart Circle -->
	<script src="~/assets/js/plugin/chart-circle/circles.min.js"></script>

	<!-- Datatables -->
	<script src="~/assets/js/plugin/datatables/datatables.min.js"></script>

	<!-- Bootstrap Notify -->
	<script src="~/assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

	<!-- jQuery Vector Maps -->
	<script src="~/assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
	<script src="~/assets/js/plugin/jsvectormap/world.js"></script>

	<!-- Sweet Alert -->
	<!-- Kaiadmin JS -->
	<script src="~/assets/js/kaiadmin.min.js"></script>

	<!-- Kaiadmin DEMO methods, don't include it in your project! -->
	<script src="~/assets/js/setting-demo.js"></script>
	<script src="~/assets/js/demo.js"></script>
	<script src="~/summernote/dist/summernote.min.js"></script>
	<!-- Bootstrap JS and Popper.js (needed for Bootstrap's components like tooltips) -->
<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<!--Manage Feature -->

	<script>
		let FeaturesArray = []
		let planUrl = []
		let planData = []
		$.ajax({
			url: BaseUrl + "api/jyotish/getPlan",
			type: "get",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			data: { Id: localStorage.getItem("Id") },
			success: function (res) {
				console.log(res)
				let planDesc = "";
				if (res.status == 200) {
					planData = res.data
					planUrl = res.data.map(e => e.url.toLowerCase())
					if (res.data.length > 0) {
						let pathArray = [];
						res.data.forEach(function (d) {
							pathArray.push(d.url.toLowerCase())
						})

						$(".featureValidation").each(function () {
							let href = $(this)
							if (href.attr("href") != null || href.attr("href") != "" || href.attr("href") != undefined) {
								if (!pathArray.includes(href.attr("href").toLowerCase())) {
									href.removeAttr("href", "")
									href.addClass("disable_link");
									href.attr("onclick", "showAlert(this)")


								}
							}
						})

					}
					else {

						$(".featureValidation").each(function () {
							let href = $(this)
							href.removeAttr("href", "")
							href.addClass("disable_link");
							href.attr("onclick", "showAlert(this)")
						})
					}
					if (res.data.length > 0) {
						$(".userPlan").html(res.data[0].planName == "Platinum" ? "Pro User"
							: res.data[0].planName == "Silver" ? `
										   Upgrade to &nbsp;
													<a href='/jyotish/Subscription' class='Gold px-2 rounded'>Gold</a>` : res.data[0].planName.trim() == "Gold" ? `
											 Upgrade to &nbsp;
															<a href='/jyotish/Subscription' class='Platinum px-2 rounded'>Platinum</a>` : res.data[0].planName)
						$(".userPlan").addClass(res.data[0].planName)
					}
				}



			},
			error: function (xhr) {
				Swal.fire({
					title: "Error",
					text: "Some issue found !",
					icon: "error"
				})
				if (xhr.status==401){
						location.href="/jyotish/login"
					}
				console.log(xhr)
			}
		}).then(() => {
			$.ajax({
				url: BaseUrl + "api/jyotish/GetAllFeatures",
				type: "get",
				headers: {
					'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
				},
				success: function (res) {
					if (res.status == 200) {
						FeaturesArray = res.data.map(d => d.serviceUrl.toLowerCase());
					}
				}
			}).then(() => {


				const pathname = window.location.pathname.toLowerCase();
				if (FeaturesArray.includes(pathname)) {
					if (!planUrl.includes(pathname)) {
						location.href = "/jyotish/dashboard"
					}
				}
			})
		})

		function getRedeemcode() {
			$.ajax({
				url: BaseUrl + "api/jyotish/getRedeemCode",
				type: "get",
				headers: {
					'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
				},
				data: { jyotishId: localStorage.getItem("Id") },
				success: function (res) {
					if (res.status == 200) {
						if (res.data.length > 0) {
							console.log(res.data, "redeem")
							let messageCount = 0;
							res.data.forEach(function (d) {
								messageCount++
								$("#messageContainer").append(` <a href="#">
																		<div class="notif-img">
																			<img src="/redeemcode.jpg"
																				 alt="Img Profile" />
																		</div>
																		<div class="notif-content">
																									<div class="redeemCodeByAdmin"><b>${d.redeemCode}</b> - (<span class='text-success'>${d.discountAmount} ${d.discount}%</span>)</div>
																									<div>${d.planName} - ${d.planType}</div>
																					<div class="EpiryDate">Expire : ${d.expiryDate}</div>

																		</div>
																	</a>`)
							})
							$(".showMessageCount").text(messageCount)
						} else {
							$("#messageContainer").append(`<p class='text-center text-secondary'>no record found</p>`)
							$(".showMessageCount").hide();

						}
					}
				}
			})
		}
		getRedeemcode()
	</script>

	<script>



		function showAlert(e) {
			$(".alert-box").removeClass("d-none")
			$(".alert-content").text(e.innerText + " : This Page is not accessible according to your plan")

			setTimeout(() => {
				$(".alert-box").addClass("d-none")
			}, 3000)
		}

		document.addEventListener('DOMContentLoaded', function () {

			let userId = localStorage.getItem('Id')
			//fetch current login user detail

			var loginUserApiUrl = BaseUrl + `Api/Jyotish/LayoutData?id=${userId}`
			var headers = {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
				'Content-Type': 'application/json',
			};
			//Make the API call using fetch()
			fetch(loginUserApiUrl, { headers: headers })
				.then(response => {
					if (response.status == 400) {

						throw new Error('Network response was not ok');
					}
					return response.json();  //Parse the JSON data from the response
				})
				.then(data => {
					if (data.status == 200) {
						let item = data.data;
						$(".userName").text(item.name)
						$(".userEmail").text(item.email)
						if (item.image != null || item.image != "")
							$(".userProfile").attr("src", BaseUrl + item.image)
							$(".userProfile").on("error",function(){
								$(".userProfile").attr("src", "/user-not-found.png")

							})
					}
				})

			// Your API URL
			var apiUrl = BaseUrl + `Api/Jyotish/NotificationData?Id=${userId}`;
			var headers = {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
				'Content-Type': 'application/json',
			};
			// Make the API call using fetch()
			fetch(apiUrl, { headers: headers })
				.then(response => {
					if (response.status == 400) {
						$('#NotificationNewText').hide();
						throw new Error('Network response was not ok');
					}
					return response.json();  // Parse the JSON data from the response
				})
				.then(data => {
					// Get the container where you want to insert the notification data
					const notificationDataContainer = document.getElementById('notificationData');

					// Iterate over each notification data item
					data.data.forEach(item => {
						// Create the notification item <a> element
						const notificationItem = document.createElement('a');
						notificationItem.href = '#';
						notificationItem.classList.add('dropdown-item');

						const shortName = item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name;
						notificationItem.innerHTML = `
											  <a href="/Jyotish/UpcomingAppointment">
																		<div class="notif-icon notif-primary">
																			<i class="fa fa-user-plus"></i>
																		</div>
																		<div class="notif-content">
																					<span class="block"> ${shortName} - Book Appointment </span>
																					<span class="time">${item.bookingDate} </span>
																		</div>
																	</a>
									`;

						// Append the notification item to the container
						notificationDataContainer.appendChild(notificationItem);
					});
				})
				.catch(error => {
					// Handle any errors that occur during the fetch
					console.error('There was a problem with the fetch operation:', error);
					const container = document.getElementById('notificationData');
					container.innerHTML = '<p>Error loading notifications. Please try again later.</p>';
				});
		});

		$(document).ready(function () {
			$('.summernote').summernote({
				height: 300, // set the height of the editor
				toolbar: [
					// Define your toolbar groups here. Exclude 'image' and 'video'
					['style', ['bold', 'italic', 'underline', 'clear']],
					['font', ['strikethrough', 'superscript', 'subscript']],
					['para', ['ul', 'ol', 'paragraph']],
					['view', ['fullscreen', 'codeview']] // remove image/video
				]
			});
		})

		// Sidebar Toggler
		let hide = true;
		// Logout
		$("#logout").click(function () {

			Swal.fire({
				title: "Are you sure you want to logout?",
				icon: 'warning',
				showConfirmButton: true,
				showCancelButton: true,  // Adds the cancel button
				confirmButtonText: 'Yes, logout',
				cancelButtonText: 'Cancel'
			}).then((result) => {
				if (result.isConfirmed) {
					localStorage.clear();
					window.location.href = "/Jyotish/Login";
				}
			});
		});

		$(".messageInpBoxs").on("input", function () {
			let characterLength = $(this).val().length
			if (characterLength > 0) {
				$("#sendMessageBtn").attr("disabled", false);
			} else {
				$("#sendMessageBtn").attr("disabled", true);

			}
		});

		//make connection for chat
		function establishedConnection(userId) {
			debugger
			let socket = new WebSocket(`wss://api.myjyotishg.in/api/chat/connect?id=${jyotishId}&receiverId=${userId}&sendBy=jyotish`);
			return new Promise((res, rej) => {
				if (socket) {

					res(socket)
				} else {
					rej(false)
				}
			});
		}
		//chat request management
		let jyotishId = localStorage.getItem("Id")
		function establishedConnectionForSendRequest() {
			let socket = new WebSocket(`wss://api.myjyotishg.in/api/chat/sendChatRequest?id=${jyotishId}&receiverId=0&sendBy=jyotish`);
			return new Promise((res, rej) => {
				if (socket) {

					res(socket)
				} else {
					rej(false)
				}
			});
		}

		let userIdForchat = null;
	let userConnectionId;
	let jtargetConnectionId;
		setTimeout(()=>{
		establishedConnectionForSendRequest().then((socket) => {
			debugger
			if (socket) {
				socket.onopen = function (event) {
					console.log('WebSocket connection established:', event);

				};
				socket.onmessage = function (event) {
					let response = JSON.parse(event.data)
					let userDetail = JSON.parse(response.data)
					console.log(response,"chat request")
					debugger
					if (userDetail != null && userDetail != false) {
						$("#userImage").attr("src", userDetail.Image)
						$("#userNameForchat").text(userDetail.Name)
						const toastElList = document.querySelectorAll('.toast');

						const toastList = [...toastElList].map(toastEl => {
							const toast = new bootstrap.Toast(toastEl, {
								autohide: false
							});
							toast.show();
						})
						const now = new Date();
						const hours = now.getHours();
						const minutes = now.getMinutes();
						$("#requestDateTime").text(`${hours}:${minutes}`);
						const image = document.querySelector('#userImage');
						userIdForchat = userDetail.Id
						image.addEventListener('error', function () {
							image.src = '/user-not-found.png';
						});
						$("#requestMessage").text(`${response.type} Request`)
						if (response.data) {
							rquestType = response.type
							jtargetConnectionId = response.roomId;
						} else {
							roomId = null
						}
						$(".toast-container").removeClass("d-none")
					} else {
						const toastElList = document.querySelectorAll('.toast');

						const toastList = [...toastElList].map(toastEl => {
							const toast = new bootstrap.Toast(toastEl, {
								autohide: false
							});
							toast.hide();
						})
						$(".toast-container").addClass("d-none")
					}
				};
				socket.onerror = function (event) {
					console.error('WebSocket error observed:', event);
					Swal.fire({
						text: "some error occured while making connection",
						title: "error",
						icon: "error"
					});
				};
				socket.onclose = function (event) {
					console.log('WebSocket connection closed:', event);
				};

				$("#AcceptChatRequest").click(async function () {
					if (rquestType == "call") {

						await startSignalR();
						if(userConnectionId){
						socket.send(`${userIdForchat}:${userConnectionId}:call`)
														$(".loader-continer-for-call").removeClass("d-none")
						setTimeout(async()=>{
						 await startCall();
															$(".loader-continer-for-call").addClass("d-none")

			document.getElementById("callStatus").innerText = "Connected";
			document.getElementById("endCallBtn").disabled = false;
			$(".call-BackContainer").removeClass("d-none")
						},4000)
						}
						
					}
					else {

						if (userIdForchat != null)
							socket.send(`${userIdForchat}:0:chat`)
						localStorage.setItem("jresumeChat", userIdForchat)

						startChat(userIdForchat);
					}
				})
			}
		})
		},10000)

		if (localStorage.getItem("jresumeChat") != null) {
			userIdForchat = localStorage.getItem("jresumeChat");
			startChat(userIdForchat);
		}
		
		function getChatHistory() {
			$.ajax({
				url: `${BaseUrl}api/chat/getchats`,
				method: "GET",
				headers: {
					'Authorization': `Bearer ${localStorage.getItem("Token")}`
				},
				data: { sender: jyotishId, receiver: userIdForchat },
				success: function (res) {
					console.log(res, "chatData")
					$('.chat-modal-body').empty()
					if (res.length > 0) {
						const messagesDiv = document.querySelector('.chat-modal-body');
						res.forEach(function (d) {
							if (d.sendBy == "client") {

								messagesDiv.innerHTML += `<div class="message float-start received ">
																			<div class="message-content">${d.message}</div>
																						<small>${d.mssDate}</small>
																</div>`

							} else {
								messagesDiv.innerHTML += `<div class="message float-end sent">
																				<div class="message-content">${d.message}</div>
																							<small>${d.mssDate}</small>
																	</div>`
							}
						})
						setTimeout(() => {
							messagesDiv.scrollTop = messagesDiv.scrollHeight;
							const lastChild = messagesDiv.lastElementChild;
							lastChild.scrollIntoView({ behavior: 'smooth', block: 'end' });
						}, 1000)
					}
				}
			})
		}

		function getSomeUser() {
			$.ajax({
				url: `${BaseUrl}api/user/LayoutData`,
				method: "GET",
				headers: {
					'Authorization': `Bearer ${localStorage.getItem("Token")}`
				},
				data: { Id: userIdForchat },
				success: function (res) {
					if (res.status === 200) {

						if (res.data != null) {
							$("#userhdetailschatheader").attr("src", res.data.image)
							$("#jyotishCallImg").attr("src", res.data.image)
							$("#ChatModalLabel").text(res.data.name)
								$("#receiverInfo").text(res.data.name)
						}
					}
					$("#jyotishCallImg").on("error",function(){
								$("#jyotishCallImg").attr("src", "/user-not-found.png")

					})
				}
			})
		}

		let interval;
		function startCounting() {
			let count = 0
			let minute = 0;
			interval=setInterval(() => {
				count++;
				if (count >= 60) {
					minute++;
					count = 0;
				}
			 let formattedMinute = minute.toString().padStart(2, '0');
			let formattedCount = count.toString().padStart(2, '0');

			$("#chatTimer").text(`${formattedMinute}:${formattedCount}`);
			}, 1000)
			
		};

		function startChat(userId) {
			getSomeUser()
			getChatHistory(userId);
			establishedConnection(userId).then((socket) => {
				if (socket) {
					let roomId = null;
					let rquestType;
					socket.onopen = function (event) {
						console.log('WebSocket connection established:', event);
						$("#ChatModal").modal("show")
						startCounting();
						const toastElList = document.querySelectorAll('.toast');

						const toastList = [...toastElList].map(toastEl => {
							const toast = new bootstrap.Toast(toastEl, {

							});

							toast.hide();
						})
					};
					socket.onmessage = function (event) {
						const now = new Date();
						const hours = now.getHours();
						const minutes = now.getMinutes();
						const messagesDiv = document.querySelector('.chat-modal-body');
						messagesDiv.innerHTML += ` <div class="message float-start received">
																							<div class="message-content"> ${JSON.parse(event.data).mssg}</div>
																							<small>${hours}:${minutes}<small>
																					</div>`

						messagesDiv.scrollTop = messagesDiv.scrollHeight;
						const lastChild = messagesDiv.lastElementChild;
						lastChild.scrollIntoView({ behavior: 'smooth', block: 'end' });
					};

					socket.onerror = function (event) {
						console.error('WebSocket error observed:', event);
						Swal.fire({
							text: "some error occured while making connection",
							title: "error",
							icon: "error"
						});
							if(interval){
						clearInterval(interval)
							}

					};

					socket.onclose = function (event) {
						console.log('WebSocket connection closed:', event);
						$("#ChatModal").modal("hide")
							if(interval){
						clearInterval(interval)
							}

					};

					$("#messageForm").submit(function (e) {
						e.preventDefault();
						debugger
						let message = $(".messageInpBoxs").val();
						const messagesDiv = document.querySelector('.chat-modal-body');

						if (socket && socket.readyState === WebSocket.OPEN) {
							if (jyotishId && message) {
								const now = new Date();
								const hours = now.getHours();
								const minutes = now.getMinutes();
								messagesDiv.innerHTML += `<div class="message float-end sent">
																								<div class="message-content">${message}</div>
																								<small>${hours}:${minutes}<small>

																						</div>`
								socket.send(`${userIdForchat}:${message}`);
							}
							$(".messageInpBoxs").val("");
							messagesDiv.scrollTop = messagesDiv.scrollHeight;
							const lastChild = messagesDiv.lastElementChild;
							lastChild.scrollIntoView({ behavior: 'smooth', block: 'end' });
						}
					});
				}
				$("#exitFromChat").click(function () {
					Swal.fire({
						title: "warning",
						text: "Do you really want to end chat",
						icon: "warning",
						showCancelButton: true,
						confirmButtonColor: "#3085d6",
						cancelButtonColor: "#d33",
						confirmButtonText: "Leave"
					}).then((result) => {
						if (result.isConfirmed) {
							socket.close();
							localStorage.removeItem("jresumeChat")
						}
					})
				})
			});
			const image = document.querySelector('#userhdetailschatheader');

			image.addEventListener('error', function () {
				image.src = '/user-not-found.png';
			});
		}


		//call mamangement

	 let connection;
		let peerConnection;
		let localStream;
		let queuedIceCandidates = [];
		let remoteDescriptionSet=false;
		const configuration = {
			iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]  // STUN server to get ICE candidates
		};

		 // Start the SignalR connection
		async function startSignalR() {
			connection = new signalR.HubConnectionBuilder()
						.withUrl(`${BaseUrl}callhub?userId=${localStorage.getItem("Id")}&sendby=jyotish`)  // Replace with the actual URL of your SignalR Hub
				.build();
				connection.on("ReceiveSignal", async (fromConnectionId, signalData,totaltimeforcall) => {
				console.log("Signal received from:", fromConnectionId, "Data:", signalData);
				let signal = JSON.parse(signalData);

				// Handle a Call Request
				if (signal.type === "callRequest") {
					if (!peerConnection) {
						await createPeerConnection();
					}
					// Set the remote description (SDP) from the received signal
					if (signal.sdp) {
						try {
									await setRemoteDescription(signal.sdp);
							// Create an answer to send back to the sender
							const answer = await peerConnection.createAnswer();
							await peerConnection.setLocalDescription(answer);
							sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
						} catch (err) {
							console.error("Error during call acceptance negotiation:", err);
						}
					}
				}

				// Handle SDP (Offer/Answer) Negotiation
				else if (signal.sdp) {
					if (!peerConnection) {
						console.log("peerConnection is not created. Creating now...");
						await createPeerConnection();
					}
					try {
					await setRemoteDescription(signal.sdp);
					} catch (err) {
						await setRemoteDescription(signal.sdp);
						console.error("Error setting remote description:", err);
					}

					if (signal.sdp.type === "offer") {
						console.log("Received offer. Creating answer...");
						const answer = await peerConnection.createAnswer();
						await peerConnection.setLocalDescription(answer);
						sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
					}
				}

				// Handle ICE Candidate
				else if (signal.ice) {
					console.log("ICE candidate received:", signal.ice);
						if (peerConnection && remoteDescriptionSet) {
						try {
							await peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice));
						} catch (err) {
							console.error("Error adding ICE candidate:", err);
						}
					} else {
						queuedIceCandidates.push(signal.ice);
					}
				}
			});

				connection.on("ClientDisconnet",async function(){
						$("#endCallBtn").click()
						Swal.fire({
							text:"Client are disconnected",
							title:"Disconnected",
							icon:"info"
						})
				})

			try {
				await connection.start();
				console.log("SignalR connected, connection ID:", connection.connectionId);
				userConnectionId= connection.connectionId
			} catch (err) {
				console.error("Error connecting to SignalR:", err);
			}
		}

			async function setRemoteDescription(sdp) {
			await peerConnection.setRemoteDescription(sdp);
			remoteDescriptionSet = true; // Indicate that the remote description has been set.
			// Add all queued ICE candidates now that the remote description has been set.
			queuedIceCandidates.forEach(async (candidate) => {
				try {
					await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
				} catch (err) {
					console.error("Error adding queued ICE candidate:", err);
				}
			});
			queuedIceCandidates = []; // Clear the queue after adding the candidates.
		}

		  function sendSignal(senderId, signalData) {
			let targetConnectionId = jtargetConnectionId;
			if (!targetConnectionId) {
				targetConnectionId = prompt("Receiver connection ID is empty. Please enter the receiver connection ID:");
				if (!targetConnectionId) {
					console.error("No receiver connection ID provided.");
					return;
				}
			}
			let userId = localStorage.getItem("userId");
			console.log("Sending signal from", senderId, "to", targetConnectionId, "data:", signalData);
			connection.invoke("SendSignal", senderId, targetConnectionId, signalData, "jyotish")
				.catch(err => console.error("Error invoking SendSignal:", err));
		}

		// Function to create PeerConnection
		async function createPeerConnection() {
			peerConnection = new RTCPeerConnection(configuration);

			// Handle ICE candidates
			peerConnection.onicecandidate = event => {
				if (event.candidate) {
					console.log("Local ICE candidate generated:", event.candidate);
					sendSignal(connection.connectionId, JSON.stringify({ ice: event.candidate }));
				}
			};

			// Handle receiving remote tracks
			peerConnection.ontrack = event => {
				console.log("Remote track received:", event.streams[0]);
				const remoteAudio = document.getElementById("remoteAudio");
				const remoteStream = event.streams[0];
				remoteAudio.srcObject = remoteStream;
				remoteAudio.muted = false;
				remoteAudio.volume = 1.0;
				remoteAudio.play().catch(err => {
					console.error("Error playing remote audio:", err);
				});
			};

				// Handle the state of the peer connection
					peerConnection.onconnectionstatechange = async () => {
							if(peerConnection){
							$("#callStatus").text(peerConnection.connectionState)
							if(peerConnection.connectionState=="failed"){
						await createPeerConnection();
							}else if(peerConnection.connectionState=="connected"){
										connection.invoke("manageUserPayment").catch(err=>{
									console.log(err)
								})
							}
					console.log("Connection state:", peerConnection.connectionState);
							}
				};

			// Add the local stream tracks to the peer connection
			if (localStream) {
				localStream.getTracks().forEach(track => {
					peerConnection.addTrack(track, localStream);
				});
			} else {
				console.error("Local stream is not available!");
			}

			// Process queued ICE candidates (if any)
			if (queuedIceCandidates.length > 0) {
				console.log("Processing queued ICE candidates...");
				for (const candidate of queuedIceCandidates) {
					try {
						await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
					} catch (err) {
						console.error("Error processing queued ICE candidate:", err);
					}
				}
				queuedIceCandidates = [];
			}
		}

				// Get the audio element and the duration display element
		const remoteAudio = document.getElementById('remoteAudio');
		const audioDuration = document.getElementById('audioDuration');
		const muteCallBtn = document.getElementById('muteCallBtn');
		let isMuted = false;
		// Function to start the call
		async function startCall() {
			try {
				localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
				console.log("Local audio stream captured:", localStream);
			} catch (err) {
				console.error("Error accessing audio devices:", err);
				alert("Could not access audio devices.");
				return;
			}

			await createPeerConnection();


			const offer = await peerConnection.createOffer();
			await peerConnection.setLocalDescription(offer);
			console.log("Local SDP set (offer):", peerConnection.localDescription.sdp);
				getSomeUser();

			const callRequestSignal = JSON.stringify({
				type: "callRequest",
				sdp: peerConnection.localDescription
			});
			sendSignal(connection.connectionId, callRequestSignal);

					remoteAudio.ontimeupdate = function() {
		  const currentTime = remoteAudio.currentTime; // Get the current playback time
		  const minutes = Math.floor(currentTime / 60); // Get the minutes
		  const seconds = Math.floor(currentTime % 60); // Get the seconds

		  // Format the time in MM:SS format
		  const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
		  // Update the displayed duration
			audioDuration.textContent = formattedTime;
		};

		muteCallBtn.removeAttribute("disabled")
		muteCallBtn.innerHTML = '<i class="fas fa-microphone"></i>'; // Change to "unmute" icon
			muteCallBtn.classList.remove('bg-secondary'); // Revert button color when unmuted
			muteCallBtn.classList.remove('bg-warning'); // Revert button color when unmuted
			muteCallBtn.classList.add('bg-warning'); // Optional: change button color to indicate mute
			// Mute or unmute the audio
			isMuted=false;
		  remoteAudio.muted = isMuted;
		}

		muteCallBtn.addEventListener('click', function() {
				debugger
			  isMuted = !isMuted; // Toggle mute state
			  // Mute or unmute the audio
			  remoteAudio.muted = isMuted;
			  // Update the button icon based on mute state
			  if (isMuted) {
				muteCallBtn.innerHTML = '<i class="fas fa-microphone-slash"></i>'; // Change to "unmute" icon
					muteCallBtn.classList.remove('bg-warning'); // Optional: change button color to indicate mute
				muteCallBtn.classList.add('bg-secondary'); // Revert button color when unmuted
			  } else {
				muteCallBtn.innerHTML = '<i class="fas fa-microphone"></i>'; // Change to "mute" icon
				muteCallBtn.classList.remove('bg-secondary'); // Revert button color when unmuted
				muteCallBtn.classList.add('bg-warning'); // Revert button color when unmuted
			  }
			});
				// Handle the "End Call" button click event
			document.getElementById("endCallBtn").addEventListener("click", () => {
				peerConnection.close();
				peerConnection = null;
						connection.stop();
						connection=null;
								remoteAudio.currentTime = 0;
				localStream.getTracks().forEach(track => track.stop());
				localStream = null;
				document.getElementById("callStatus").innerText = "Call Ended";
				document.getElementById("endCallBtn").disabled = true;
				setTimeout(()=>{
					$(".call-BackContainer").addClass("d-none")

				},2000)
			});

	</script>

</body>

</html>