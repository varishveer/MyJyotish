<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Peer-to-Peer Voice Call Demo</title>
    <!-- Bootstrap CSS (Make sure to include this link to use Bootstrap) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .call-container {
            background-color: #ffffff;
            border-radius: 15px;
            width: 360px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .call-info {
            font-size: 16px;
            margin-top: 10px;
            color: #333;
            margin-bottom: 20px;
        }

        .call-buttons {
            display: flex;
            justify-content: space-evenly;
            width: 100%;
        }

            .call-buttons button {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 50%;
                width: 60px;
                height: 60px;
                font-size: 18px;
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .call-buttons button:disabled {
                    background-color: #ccc;
                }

                .call-buttons button:hover {
                    background-color: #45a049;
                }

        .audio-container {
            margin-top: 20px;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #remoteAudio {
            width: 100%;
            height: 60px;
            background-color: #eee;
            border-radius: 8px;
            margin-bottom: 10px;
            display: block;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .call-status {
            font-size: 18px;
            color: #ff5722;
            font-weight: bold;
        }

        .receiver-input {
            width: 100%;
            margin-bottom: 10px;
        }

        .receiver-info {
            font-size: 14px;
            color: #555;
        }
    </style>
</head>
<body>

    <div class="call-container">
        <h1 class="mb-4">Voice Call Demo</h1>

        <!-- Display the local connection ID -->
        <div id="userInfo" class="mb-3">Your Connection ID: <span id="myConnId"></span></div>

        <!-- Input for Target (Receiver) Connection ID -->
        <div class="mb-3">
            <label for="targetConnectionId" class="form-label">Receiver Connection ID</label>
            <input type="text" id="targetConnectionId" class="form-control receiver-input" placeholder="Enter Receiver ID" />
        </div>

        <!-- Display call info -->
        <div class="call-info">
            <span>Call with:</span>
            <div id="receiverInfo" class="receiver-info">No one yet</div>
        </div>

        <!-- Buttons for starting and ending the call -->
        <div class="call-buttons">
            <button id="startCallBtn" title="Start Call">📞</button>
            <button id="endCallBtn" title="End Call" disabled>🛑</button>
        </div>

        <!-- Audio container for remote audio -->
        <div class="audio-container">
            <audio id="remoteAudio" autoplay controls></audio>
            <div class="call-status" id="callStatus">Waiting for call...</div>
        </div>
    </div>

    <!-- Bootstrap JS and Popper.js (needed for Bootstrap's components like tooltips) -->
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
              let connection;
        let peerConnection;
        let localStream;
        let queuedIceCandidates = [];
        const configuration = {
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]  // STUN server to get ICE candidates
        };

        // Start the SignalR connection
        async function startSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:7118/callhub")  // Replace with the actual URL of your SignalR Hub
                .build();

            connection.on("ReceiveSignal", async (fromConnectionId, signalData) => {
                console.log("Signal received from:", fromConnectionId, "Data:", signalData);
                let signal = JSON.parse(signalData);

                // Handle a Call Request
                if (signal.type === "callRequest") {
                    if (!peerConnection) {
                        await createPeerConnection();
                    }
                    // Set the remote description (SDP) from the received signal
                    if (signal.sdp) {
                        try {
                            await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp));
                            // Create an answer to send back to the sender
                            const answer = await peerConnection.createAnswer();
                            await peerConnection.setLocalDescription(answer);
                            sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
                        } catch (err) {
                            console.error("Error during call acceptance negotiation:", err);
                        }
                    }
                }

                // Handle SDP (Offer/Answer) Negotiation
                else if (signal.sdp) {
                    if (!peerConnection) {
                        console.log("peerConnection is not created. Creating now...");
                        await createPeerConnection();
                    }
                    try {
                        await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp));
                    } catch (err) {
                        console.error("Error setting remote description:", err);
                    }

                    if (signal.sdp.type === "offer") {
                        console.log("Received offer. Creating answer...");
                        const answer = await peerConnection.createAnswer();
                        await peerConnection.setLocalDescription(answer);
                        sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
                    }
                }

                // Handle ICE Candidate
                else if (signal.ice) {
                    console.log("ICE candidate received:", signal.ice);
                    if (peerConnection) {
                        try {
                            await peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice));
                        } catch (err) {
                            console.error("Error adding ICE candidate:", err);
                        }
                    } else {
                        queuedIceCandidates.push(signal.ice);
                    }
                }
            });

            try {
                await connection.start();
                console.log("SignalR connected, connection ID:", connection.connectionId);
                document.getElementById("myConnId").innerText = connection.connectionId;
            } catch (err) {
                console.error("Error connecting to SignalR:", err);
            }
        }

        // Function to send signaling data
        function sendSignal(senderId, signalData) {
            let targetConnectionId = document.getElementById("targetConnectionId").value;
            if (!targetConnectionId) {
                targetConnectionId = prompt("Receiver connection ID is empty. Please enter the receiver connection ID:");
                if (!targetConnectionId) {
                    console.error("No receiver connection ID provided.");
                    return;
                }
                document.getElementById("targetConnectionId").value = targetConnectionId;
            }
            let userId = localStorage.getItem("userId");
            console.log("Sending signal from", senderId, "to", targetConnectionId, "data:", signalData);
            connection.invoke("SendSignal", senderId, targetConnectionId, signalData, userId)
                .catch(err => console.error("Error invoking SendSignal:", err));
        }

        // Function to create PeerConnection
        async function createPeerConnection() {
            peerConnection = new RTCPeerConnection(configuration);

            // Handle ICE candidates
            peerConnection.onicecandidate = event => {
                if (event.candidate) {
                    console.log("Local ICE candidate generated:", event.candidate);
                    sendSignal(connection.connectionId, JSON.stringify({ ice: event.candidate }));
                }
            };

            // Handle receiving remote tracks
            peerConnection.ontrack = event => {
                console.log("Remote track received:", event.streams[0]);
                const remoteAudio = document.getElementById("remoteAudio");
                const remoteStream = event.streams[0];
                remoteAudio.srcObject = remoteStream;
                remoteAudio.muted = false;
                remoteAudio.volume = 1.0;
                remoteAudio.play().catch(err => {
                    console.error("Error playing remote audio:", err);
                });
            };

            // Handle the state of the peer connection
            peerConnection.onconnectionstatechange = () => {
                console.log("Connection state:", peerConnection.connectionState);
            };

            // Add the local stream tracks to the peer connection
            if (localStream) {
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });
            } else {
                console.error("Local stream is not available!");
            }

            // Process queued ICE candidates (if any)
            if (queuedIceCandidates.length > 0) {
                console.log("Processing queued ICE candidates...");
                for (const candidate of queuedIceCandidates) {
                    try {
                        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                    } catch (err) {
                        console.error("Error processing queued ICE candidate:", err);
                    }
                }
                queuedIceCandidates = [];
            }
        }

        // Function to start the call
        async function startCall() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
                console.log("Local audio stream captured:", localStream);
            } catch (err) {
                console.error("Error accessing audio devices:", err);
                alert("Could not access audio devices.");
                return;
            }

            await createPeerConnection();

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            console.log("Local SDP set (offer):", peerConnection.localDescription.sdp);

            const callRequestSignal = JSON.stringify({
                type: "callRequest",
                sdp: peerConnection.localDescription
            });
            sendSignal(connection.connectionId, callRequestSignal);
        }

        // Handle the "Start Call" button click event
        document.getElementById("startCallBtn").addEventListener("click", async () => {
            await startCall();
            document.getElementById("callStatus").innerText = "Calling...";
            document.getElementById("startCallBtn").disabled = true;
            document.getElementById("endCallBtn").disabled = false;
        });

        // Handle the "End Call" button click event
        document.getElementById("endCallBtn").addEventListener("click", () => {
            peerConnection.close();
            peerConnection = null;
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
            document.getElementById("callStatus").innerText = "Call Ended";
            document.getElementById("startCallBtn").disabled = false;
            document.getElementById("endCallBtn").disabled = true;
        });

        // Start the SignalR connection when the page loads
        startSignalR();

    </script>
</body>
</html>
