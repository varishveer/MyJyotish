
<style>
	/* Background and container styling */
	body {
		font-family: 'Poppins', sans-serif;
		background: linear-gradient(135deg, #f0f4fd, #dae9f4);
		margin: 0;
		padding: 0;
	}

	.astrologer-list {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 30px;
		padding: 50px 20px;
		max-width: 1200px;
		margin: 0 auto;
	}

	.astrologer-card {
		position: relative;
		background: white;
		border-radius: 15px;
		overflow: hidden;
		padding: 10px;
		transition: transform 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
		max-width: 450px !important;
		background: linear-gradient(135deg, #f8f9fa, #f1f1f1);
	}

		.astrologer-card:hover {
			transform: translateY(-20px) scale(1.05);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
		}

	/* Left Section: Profile Image and Stars */
	.profile-section {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.profile-image-container {
		width: 120px;
		height: 120px;
		border-radius: 8px;
		overflow: hidden;
		border: 5px solid #f0f4fd;
		box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
	}

	.jyotishProfileImages {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: border-color 0.4s ease-in-out;
	}

	.astrologer-card:hover .jyotishProfileImages {
		border-color: #ffc107;
	}

	/* Right Section: Details */
	.card-body {
		text-align: left;
		padding-left: 15px;
	}

	.astrologer-card h6 {
		font-size: 1.2em;
		font-weight: bold;
		margin: 10px 0 5px;
		color: #333;
	}

	.astrologer-card p {
		font-size: 0.95em;
		color: #666;
		margin: 8px 0;
	}

		.astrologer-card p span {
			color: #333;
			font-weight: bold;
		}

	/* Add a decorative icon for creativity */
	.astrologer-card .decorative-icon {
		position: absolute;
		top: -20px;
		right: -20px;
		font-size: 50px;
		color: rgba(255, 193, 7, 0.1);
		transition: transform 0.4s ease;
	}

	.astrologer-card:hover .decorative-icon {
		transform: rotate(45deg);
		color: rgba(255, 193, 7, 0.3);
	}

	.call-container {
		background-color: #ffffff;
		border-radius: 15px;
		width: 360px;
		padding: 20px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
		top: 50%;
		left: 50%;
	}

	.call-info {
		font-size: 16px;
		margin-top: 10px;
		color: #333;
		margin-bottom: 20px;
	}

	.call-buttons {
		display: flex;
		justify-content: space-evenly;
		width: 100%;
	}

		.call-buttons button {
			background-color: #4CAF50;
			color: white;
			border: none;
			border-radius: 50%;
			width: 60px;
			height: 60px;
			font-size: 18px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

			.call-buttons button:disabled {
				background-color: #ccc;
			}

			.call-buttons button:hover {
				background-color: #45a049;
			}

	.audio-container {
		margin-top: 20px;
		width: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	#remoteAudio {
		width: 100%;
		height: 60px;
		background-color: #eee;
		border-radius: 8px;
		margin-bottom: 10px;
		display: block;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
	}

	.call-status {
		font-size: 18px;
		color: #ff5722;
		font-weight: bold;
	}

	.receiver-input {
		width: 100%;
		margin-bottom: 10px;
	}

	.receiver-info {
		font-size: 14px;
		color: #555;
	}

	.call-BackContainer {
		top: 0;
		z-index: 10000000000000000000;
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	/* Fullscreen background */
	.loader-continer-for-call {
		height: 100vh;
		width: 100vw;
		display: flex;
		justify-content: center;
		align-items: center;
		background: linear-gradient(135deg, black, gray);
		overflow: hidden;
		position: fixed;
		top: 0;
		left: 0;
		z-index: 10000000000000000000;
	}

	/* Loader container */
	.call-loader {
		position: relative;
		width: 150px;
		height: 150px;
	}


	/* Central glowing orb */
	.orb {
		position: absolute;
		top: 50%;
		left: 50%;
		width: 30px;
		height: 30px;
		background: #00d1ff;
		border-radius: 50%;
		box-shadow: 0 0 15px #00d1ff, 0 0 30px #00d1ff, 0 0 60px rgba(0, 209, 255, 0.5);
		transform: translate(-50%, -50%);
		animation: pulse 2s infinite ease-in-out;
	}

	/* Pulsating waves */
	.wave {
		position: absolute;
		top: 50%;
		left: 50%;
		width: 100%;
		height: 100%;
		background: none;
		border: 2px solid rgba(0, 209, 255, 0.5);
		border-radius: 50%;
		transform: translate(-50%, -50%) scale(0);
		animation: expand 3s infinite ease-in-out;
	}

		.wave:nth-child(2) {
			animation-delay: 1s;
		}

		.wave:nth-child(3) {
			animation-delay: 2s;
		}

	/* Animations */
	@@keyframes pulse {
		0%, 100% {
			transform: translate(-50%, -50%) scale(1);
		}

		50% {
			transform: translate(-50%, -50%) scale(1.2);
		}
	}

	@@keyframes expand {
		0% {
			transform: translate(-50%, -50%) scale(0);
			opacity: 1;
		}

		100% {
			transform: translate(-50%, -50%) scale(1.5);
			opacity: 0;
		}
	}

	.w-23 {
		width: 32.4%;
	}

	.active-logo {
		left: 0;
	}
</style>

<div class="d-none loader-continer-for-call">
	<div class="call-loader">
		<div class="orb"></div>
		<div class="wave"></div>
		<div class="wave"></div>
		<div class="wave"></div>
	</div>
</div>
<div class="astrologer-list mx-3 mt-3">
	<!-- Astrologer results will be injected here -->
	<div class="row gap-3" id="astrologerList"></div>

</div>

<!-- Modal call-->
<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModal2Label" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModal2Label"> Please enter your details </h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">

				<div class="row d-flex">
					<div class="col-md-4 mb-2">
						<label name="Name">Name</label>
						<input class="form-control" name="Name" id="Name" type="text" />
					</div>

					<div class="col-md-4  mb-2">
						<label name="Gender">Gender</label>
						<select id="Gender" name="Gender" class="form-select custom-field" required>
							<option value="Male" selected>Male</option>
							<option value="Female">Female</option>
							<option value="Other">Other</option>
						</select>
					</div>

					<div class="col-md-4  mb-2">
						<label name="DateOfBirth">DateOfBirth</label>
						<input class="form-control" name="DateOfBirth" id="DateOfBirth" type="date" />
					</div>
				</div>

				<div class="row d-flex">
					<div class="col-md-4 mb-2 ">
						<label name="TimeOfBirth">TimeOfBirth</label>
						<input class="form-control" name="TimeOfBirth" id="TimeOfBirth" type="time" />
					</div>
					<div class="col-md-4 mb-2 position-relative">
						<label name="PlaceOfBirth">PlaceOfBirth</label>

						<input list="PlaceOfBirthList" type="text" id="PlaceOfBirth" name="placeOfBirth" class="form-control custom-field"
							   placeholder="Enter City" autocomplete="off" />
						<div class="position-absolute w-100 bg-light d-none" id="PlaceOfBirthList">
						</div>
					</div>
					<div class="col-md-4  mb-2">
						<input id="JyotishId" hidden />
						<input id="UserId" hidden />
						<input id="Action" value="2" hidden />
					</div>
				</div>

			</div>
			<div class="modal-footer">

				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" id="DataSubmitBtn">Submit</button>
			</div>
		</div>
	</div>
</div>


<div class="vw-100 vh-100 d-flex justify-content-center d-none align-items-center bg-dark call-BackContainer position-fixed">
	<div class="call-container shadow">
		<!-- Display call info -->
		<div class="call-info">
			<div class="text-center mb-3">
				<img src="/user-not-found.png" id="jyotishCallImg" height="100" width="100" class="rounded-circle" />
			</div>
			<div id="receiverInfo" class="receiver-info fw-bold">
				Jyotish
			</div>
			<div id="audioDuration" class="audio-duration border rounded mt-2 px-2 py-1">00:00</div>
			<!-- Add real-time audio duration display here -->
		</div>

		<!-- Buttons for starting and ending the call -->
		<div class="call-buttons my-4">
			<button role="button" id="endCallBtn" class="bg-danger text-light" title="End Call" disabled><i class="fas fa-phone-alt"></i></button>
			<button role="button" id="muteCallBtn" class="bg-warning text-light" title="Mute/Unmute Call" disabled><i class="fas fa-microphone"></i></button>
		</div>

		<!-- Audio container for remote audio -->
		<div class="audio-container">
			<audio id="remoteAudio" hidden autoplay controls></audio>
			<div class="call-status" id="callStatus">Waiting for call...</div>
		</div>
	</div>
</div>

<!-- Bootstrap JS and Popper.js (needed for Bootstrap's components like tooltips) -->
<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>

	//time management for message

	function getSomeJyotish(jyotishId) {
		$.ajax({
			url: `${BaseUrl}api/jyotish/LayoutData`,
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}`
			},
			data: { Id: jyotishId },
			success: function (res) {
				if (res.status === 200) {

					if (res.data != null) {
						$("#jyotishdetailschatheader").attr("src", res.data.image)
							$("#jyotishCallImg").attr("src", res.data.image)
						$("#ChatModalLabel").text(res.data.name)
							$("#receiverInfo").text(res.data.name)

					}
				}
					$("#jyotishCallImg").on("error",function(){
					$("#jyotishCallImg").attr("src","/user-not-found.png")
					})
			}
		})
	}
	// Function to fetch astrologers for the chat
	function GetAstroListCallChat() {
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		$.ajax({
			url: BaseUrl + 'Api/User/GetAstroListCallChat?listName=Call',
			type: 'GET',
			success:async function (response) {
				if (response.status === 200) {
					var astrologers = response.data;
					if (astrologers.length > 0) {
						displayAstrologers(astrologers);
					} else {
						let data= await getAdvertisementBanners();
						$('#astrologerList').html(`<p class="text-center">No astrologers found.</p>
				${data.data.result.length>0?`<div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mt-4  p-1">
														  <div class="card w-100 h-100 ">
																<img height="200" class="w-100 rounded" src="${BaseUrl+data.data.result[0].bannerUrl}">
														  </div>
													  </div>`:""}`);
					}
				} else {
					let data= await getAdvertisementBanners();
						$('#astrologerList').html(`<p class="text-center">No astrologers found.</p>
				${data.data.result.length>0?`<div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mt-4  p-1">
														  <div class="card w-100 h-100 ">
																<img height="200" class="w-100 rounded" src="${BaseUrl+data.data.result[0].bannerUrl}">
														  </div>
													  </div>`:""}`);
				}
				Swal.close();
				$(".jyotishProfileImages").on('error', function () {
					$(this).attr("src", '/user-not-found.png');
				});
			},
			error: function () {

				$('#astrologerList').html('<p class="text-center">An error occurred while searching for astrologers.</p>');
			}
		});
	}
	function generateFullStars(starCount) {

		let hstarCount=starCount%1!=0?1:0;

		let empStars='<i class="far fa-star"></i>'.repeat(5-starCount);;
		let fillStars='<i class="fa fa-star"></i>'.repeat(starCount);;
		let halfStars='<i class="fas fa-star-half-alt"></i>'.repeat(hstarCount);

		return fillStars+halfStars+empStars;
	}

		async function getAdvertisementBanners(){
		let data=null;
		   await $.ajax({
				  url: BaseUrl + "api/user/AdvertisementBanner",
				type: "get",
				success: function (res) {
					  data=res;
				}, error: function () {
					$('#astrologerList').html('<p>An error occurred while searching for astrologers.</p>');
				}
			})
		return data
	}
	// Function to display astrologers dynamically
	async function displayAstrologers(astrologers) {
		  let adCount=0;
		let showAdvCount=0;
		let data= await getAdvertisementBanners();
		var html = '';
		astrologers.forEach(function (astrologer) {
			var ImgSrc = BaseUrl + astrologer.profileImageUrl;
			html += `
					<div class="astrologer-card w-23 position-relative">
		<small class="py-1 fw-bold px-2 text-light position-absolute top-0 active-logo ${astrologer.activeStatus ? 'bg-success' : 'bg-danger'}">
			${astrologer.activeStatus ? 'Active' : 'Inactive'}
		</small>

			<div class="d-flex align-items-start">
				<!-- Left side: Avatar and Star Section -->
				<div class="profile-section">
		<a href="/Home/JyotishProfile?Id=${astrologer.id}" class="text-decoration-none">
					<div class="profile-image-container">
						<img src="${ImgSrc}" class="jyotishProfileImages" alt="${astrologer.name}">
					</div>
					<div class="text-warning my-2">
						${generateFullStars(astrologer.stars)}
					</div>
					<div class="text-secondary">Orders : ${astrologer.totalOrder}</div>
		</a>
				</div>

				<!-- Right side: Details Section -->
				<div class="card-body ms-3">
					<p class="card-title fw-bold">${astrologer.name} <i class="fa-solid text-success fa-circle-check"></i> - ${astrologer.city}</p>
					<small class=" text-secondary">
						${astrologer.expertise?.split(',').splice(0,3).toString()}
					</small>
					<small class="d-block text-secondary">${astrologer.language}</small>
					<small class="d-block text-secondary">Exp : ${astrologer.experience != null ? astrologer.experience : 0} Years</small>
					<br>
					<button ${astrologer.activeStatus ? '' : 'disabled'} class="btn btn-success callBtn me-2 mb-2 mb-md-0"
			id="callBtn_${astrologer.id}" onclick="CallBtn(${astrologer.id})"
			>
			Start Call ${astrologer.callCharges==0?"Free":"₹"+astrologer.callCharges+"/min"}
		</button>
		<button class="btn btn-outline-success d-none" id="waitingBtn_${astrologer.id}">Waiting...</button>
				</div>
			</div>


	</div>
				`
				;
	 adCount++
				if(adCount==6 &&data!=null){
					if(data.data.result.length>0){

					html+=`
	  <div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mb-2 mt-4 p-1">
												<div class="card w-100 h-100 ">
													  <img height="170" class="w-100 rounded" src="${BaseUrl+data.data.result[showAdvCount].bannerUrl}">
												</div>
											</div>`
													if(data.data.result.length-1==showAdvCount){
														  showAdvCount=0;
													}else{
												showAdvCount++;
													}
					}
				adCount=0;
				  }
			});
			   if(astrologers.length<6){
					 html+=`
		<div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mt-4 mb-2 p-1">
												  <div class="card w-100 h-100 ">
														<img height="170" class="w-100 rounded" src="${BaseUrl+data.data.result[showAdvCount].bannerUrl}">
												  </div>
											  </div>`
					}
		$('#astrologerList').html(html);
		$(".jyotishProfileImages").on('error', function () {
					$(this).attr("src", '/user-not-found.png');
				});
	}

	// Initialize the function to get astrologers on page load
	GetAstroListCallChat();


	let userConnectionId;
	let utargetConnectionId;
	let checkconnectionRequest=true;
	 $('#DataSubmitBtn').on('click',async function () {

		var astrologerId = $('#JyotishId').val();
		var Name = $("#Name").val();
		var Gender = $("#Gender").val();
		var DateOfBirth = $("#DateOfBirth").val();
		var TimeOfBirth = $("#TimeOfBirth").val();
		var PlaceOfBirth = $("#PlaceOfBirth").val();

		var UserId = localStorage.getItem('userId');
		let checkChatValidation=false;
		await $.ajax({
					url: BaseUrl + "api/User/getservicePriceAndWalletAmount", // Ensure BaseUrl is properly defined
					method: "GET",
					headers: {
						'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
					},
					data: {
					jyotishId: astrologerId, userId: UserId, type:"call"
					}, // Corrected JSON.stringify
					contentType: "application/json", // Ensure content type is set to JSON
					success: function (res) {
						debugger
						if (res.status === 200) {
							if (res.userWallet > (res.charges * 5)) {
								checkChatValidation=true
							}else{
								checkChatValidation = false;
						$("#exampleModal3").modal("hide")

								Swal.fire({
									title: "<strong>Recharge Now</strong>",
									icon: "info",
									html: `
								Currently you have <b class='text-danger'>₹${res.userWallet}</b > in your wallet minimum required <b class='text-success'>₹${res.charges * 5}<b/></br>
			<a class='btn btn-success' target="_blank" href="/Home/Wallet" autofocus>Recharge Now</a>
	  `,
									showCloseButton: true,
									showCancelButton: true,
									focusConfirm: false,
									confirmButtonText: `
			Later!
	  `,
									confirmButtonAriaLabel: "Later!",
									cancelButtonText: `
		Close
	  `,							cancelButtonAriaLabel: "Close"
								});
							}
						}
					}

	})
	if(checkChatValidation){
		var DataContainer = {
			Name: Name,
			Gender: Gender,
			DateOfBirth: DateOfBirth,
			TimeOfBirth: TimeOfBirth,
			PlaceOfBirth: PlaceOfBirth,
			JyotishId: astrologerId,
			UserId: UserId,
			Action: 2
		}
		if (TimeOfBirth == "" || Name == "" || Gender == "" || DateOfBirth == "" || PlaceOfBirth == "" || JyotishId == "" || UserId=="" || Action=="") {
					Swal.fire({
						title: "warning",
						text: "all fields are required",
						icon: "warning"
					})

		} else {
		$.ajax({
			url: BaseUrl + "api/User/AddUserServiceRecord", // Ensure BaseUrl is properly defined
			method: "POST",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
			},
			data: JSON.stringify(DataContainer), // Corrected JSON.stringify
			contentType: "application/json", // Ensure content type is set to JSON
			success: function (response) {
				if (response.status === 200) {
					establishedConnectionForSendRequest(astrologerId).then((socket) => {
								debugger
								if (socket) {
									socket.onopen =async function (event) {
										console.log('WebSocket connection established:', event);
										let call="call"
										if (astrologerId) {
											$("#exampleModal2").modal("hide")
											await startSignalR();
											socket.send(`${astrologerId}:${userConnectionId}:${call}`);
									$("#callBtn_" + astrologerId).hide();
											$("#waitingBtn_"+astrologerId).removeClass("d-none")
										}
									};
									socket.onmessage =async function (event) {
										let response = JSON.parse(event.data)
										console.log(response)
										if (response.data) {

											socket.close()
											debugger
											if(response.type=="call"){
											utargetConnectionId=response.roomId
														$(".loader-continer-for-call").removeClass("d-none")
													setTimeout(async()=>{
			await startCall();
														$(".loader-continer-for-call").addClass("d-none")
			document.getElementById("callStatus").innerText = "Connected";
			document.getElementById("endCallBtn").disabled = false;
			$(".call-BackContainer").removeClass("d-none")
													},3000)
										}
								} else if(!response.data){
											if (response.anotherRequest && !response.notAvailable) {
												Swal.fire({
													text: "Another Request are already in Progress..",
													title: "warning",
													icon: "warning",
													didClose:()=>{
										socket.close()
										$("#callBtn_" + astrologerId).show();
									$("#waitingBtn_" + astrologerId).addClass("d-none")
													}
												});
											}else {
											Swal.fire({
												text: "Currently jyotish are busy..",
												title: "warning",
												icon: "warning",
												didClose:()=>{
											socket.close()
											$("#callBtn_" + astrologerId).show();
									$("#waitingBtn_" + astrologerId).addClass("d-none")
												}
											});

										}
									$("#callBtn_" + astrologerId).show();
									$("#waitingBtn_" + astrologerId).addClass("d-none")
									if(socket.OPEN){
											socket.close()
									}

										}
								};

									socket.onerror = function (event) {
										console.error('WebSocket error observed:', event);
										Swal.fire({
											text: "some error occured while making connection",
											title: "error",
											icon: "error"
										});
									};

									socket.onclose = function (event) {
										console.log('WebSocket connection closed:', event);

								$("#callBtn_" + astrologerId).show();
								$("#waitingBtn_"+astrologerId).addClass("d-none")

									};

								}
							})
				} else {
					// Handle unexpected response status (if needed)
					Swal.fire({
						title: "Error!",
						text: "There was an issue with the response.",
						icon: "error"
					});
				}
			},
			error: function (xhr, status, error) {
				// Error case: Handle request errors
				Swal.fire({
					title: "Error!",
					text: "Something went wrong. Please try again later.",
					icon: "error"
				});
			}
		});
		}
		}
	});

	var UserId = localStorage.getItem('userId');
	if(UserId != null && UserId != undefined)
	{
		GetUserDataForService(UserId);
	}
	function establishedConnectionForSendRequest(jyotishId) {
		let socket = new WebSocket(`wss://api.myjyotishg.in/api/chat/sendChatRequest?id=${UserId}&receiverId=${jyotishId}&sendBy=client`);
		return new Promise((res, rej) => {
			if (socket) {

				res(socket)
			} else {
				rej(false)
			}
		});
	}
	 function GetUserDataForService(Id) {
		$.ajax({
			url: `${BaseUrl}api/User/GetUserDataForService?Id=${Id}`,
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}`
			},
			success: function (response) {
				if (response.status === 200) {
					debugger
					$('#Name').val(response.data.name);
					$('#Gender').val(response.data.gender);
					$('#DateOfBirth').val(response.data.dateOfBirth.split('T')[0]);
					$('#TimeOfBirth').val(response.data.timeOfBirth);
					$('#PlaceOfBirth').val(response.data.placeOfBirth);

				}
			},
			error: function (xhr, status, error) {

				console.log("Error:", error);
				console.log("Status:", status);
				console.log("XHR:", xhr);
			}
		});
	}

	function CallBtn(id)
	{
		if (localStorage.getItem("userId") == null || localStorage.getItem("Token") == null) {
			$("#exampleModal").modal("hide")
			Swal.fire({
				title: "Authentication Required",
				text: "Please login for make call with astrologers",
				icon: "warning",
				showCancelButton: true,
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: "Login"
			}).then((result) => {
				if (result.isConfirmed) {
					location.href = "/home/login"
				}
			})


		} else {
		 $('#JyotishId').val(id);
			$("#exampleModal2").modal("show")
		}
	}

	async function getUserWallet(userId,jyotishId){
		let walletAmount;
		await $.ajax({
			url: BaseUrl + "api/User/getservicePriceAndWalletAmount", // Ensure BaseUrl is properly defined
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
			},
			data: {
				jyotishId: jyotishId, userId: userId, type: "call"
			}, // Corrected JSON.stringify
			contentType: "application/json", // Ensure content type is set to JSON
			success: function (res) {
				if (res.status === 200) {
					walletAmount = res;
				}
			}

		})
		return walletAmount;
	}

			//call mamangement
			let connection;
			let peerConnection;
			let localStream;
			let queuedIceCandidates = [];
				let remoteDescriptionSet = false;
			const configuration = {
				iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]  // STUN server to get ICE candidates
			};

			 // Start the SignalR connection
			async function startSignalR() {
				connection = new signalR.HubConnectionBuilder()
						.withUrl(`${BaseUrl}callhub?userId=${localStorage.getItem("userId")}&sendby=client`)  // Replace with the actual URL of your SignalR Hub
					.build();

					connection.on("ReceiveSignal", async (fromConnectionId, signalData,totaltimeforcall) => {
					let signal = JSON.parse(signalData);

					// Handle a Call Request
					if (signal.type === "callRequest") {
						if (!peerConnection) {
							await createPeerConnection();
						}
						// Set the remote description (SDP) from the received signal
							if (signal.sdp) {
							try {
								await setRemoteDescription(signal.sdp);
								// Create an answer to send back to the sender
								const answer = await peerConnection.createAnswer();
								await peerConnection.setLocalDescription(answer);
								sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
							} catch (err) {
								console.error("Error during call acceptance negotiation:", err);
							}
						}
							const remoteAudio = document.getElementById('remoteAudio');
							const audioDuration = document.getElementById('audioDuration');
											remoteAudio.ontimeupdate = function() {
										 const currentTime = remoteAudio.currentTime; // Get the current playback time
		                                 const minutes = Math.floor(currentTime / 60); // Get the minutes
		                                 const seconds = Math.floor(currentTime % 60); // Get the seconds
		                                
		                                 // Format the time in MM:SS format
		                                 const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
		                                 // Update the displayed duration
		                                	audioDuration.textContent = formattedTime;
														if(minutes>=totaltimeforcall){
															$("#endCallBtn").click()
											Swal.fire({
												text:"Insufficient Balance",
												title:"Disconnected",
												icon:"info"
											})

													}
											}
					}
					// Handle SDP (Offer/Answer) Negotiation
					else if (signal.sdp) {
						if (!peerConnection) {
							await createPeerConnection();
						}
						try {
						await setRemoteDescription(signal.sdp);
						} catch (err) {
						await setRemoteDescription(signal.sdp);
							console.error("Error setting remote description:", err);
						}
						if (signal.sdp.type === "offer") {
							const answer = await peerConnection.createAnswer();
							await peerConnection.setLocalDescription(answer);
							sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
						}
					}
					// Handle ICE Candidate
					else if (signal.ice) {
							if (peerConnection && remoteDescriptionSet) {
							try {
							await addCandidate(signal.ice)

							} catch (err) {
								await addCandidate(signal.ice)
								console.error("Error adding ICE candidate:", err);
							}
						} else {
							queuedIceCandidates.push(signal.ice);
						}
					}
				});

				connection.on("ClientDisconnet",async function(){
						$("#endCallBtn").click()
						Swal.fire({
							text:"Jyotish are disconnected",
							title:"Disconnected",
							icon:"info"
						})
				})
					try {
					await connection.start();
					userConnectionId= connection.connectionId
				} catch (err) {
					console.error("Error connecting to SignalR:", err);
				}
			}

			async function addCandidate(signal){
			await peerConnection.addIceCandidate(new RTCIceCandidate(signal)).catch(async (err)=>{
				console.log(err)
				await addCandidate(signal)
			});

			}

				window.addEventListener('beforeunload', function (event) {
			// This will show a default confirmation message in most browsers
			const message = "Are you sure you want to leave? You might lose your data.";

			// Standard browser behavior for showing an alert
			event.returnValue = message; // For most browsers (e.g., Chrome)

			return message; // For other browsers (e.g., Firefox)
		});

				// Function to set remote description
		async function setRemoteDescription(sdp) {
			await peerConnection.setRemoteDescription(sdp);
			remoteDescriptionSet = true; // Indicate that the remote description has been set.
			// Add all queued ICE candidates now that the remote description has been set.
			queuedIceCandidates.forEach(async (candidate) => {
				try {
					await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
				} catch (err) {
					console.error("Error adding queued ICE candidate:", err);
				}
			});
			queuedIceCandidates = []; // Clear the queue after adding the candidates.
		}

				// Function to set remote description

			  function sendSignal(senderId, signalData) {
				let targetConnectionId = utargetConnectionId;
				if (!targetConnectionId) {
					targetConnectionId = prompt("Receiver connection ID is empty. Please enter the receiver connection ID:");
					if (!targetConnectionId) {
						console.error("No receiver connection ID provided.");
						return;
					}
				}
				let userId = localStorage.getItem("userId");
				connection.invoke("SendSignal", senderId, targetConnectionId, signalData, "client")
					.catch(err => console.error("Error invoking SendSignal:", err));




			}

			// Get the audio element and the duration display element
		const remoteAudio = document.getElementById('remoteAudio');

			// Function to create PeerConnection
			async function createPeerConnection() {
				peerConnection = new RTCPeerConnection(configuration);

				// Handle ICE candidates
				peerConnection.onicecandidate = event => {
					if (event.candidate) {
						sendSignal(connection.connectionId, JSON.stringify({ ice: event.candidate }));
					}
				};

				// Handle receiving remote tracks
				peerConnection.ontrack = event => {
					console.log("Remote track received:", event.streams[0]);
					const remoteStream = event.streams[0];
					remoteAudio.srcObject = remoteStream;
					remoteAudio.muted = false;
					remoteAudio.volume = 1.0;
					remoteAudio.play().catch(err => {
						console.error("Error playing remote audio:", err);
					});
				};

				// Handle the state of the peer connection
				peerConnection.onconnectionstatechange = async () => {
					if(peerConnection){
							$("#callStatus").text(peerConnection.connectionState)
							if(peerConnection.connectionState=="failed"){
						await createPeerConnection();
							}else if(peerConnection.connectionState=="connected"){
										connection.invoke("manageUserPayment").catch(err=>{
									console.log(err)
								})
							}
					console.log("Connection state:", peerConnection.connectionState);
					}
				};

				// Add the local stream tracks to the peer connection
				if (localStream) {
					localStream.getTracks().forEach(track => {
						peerConnection.addTrack(track, localStream);
					});
				} else {
					console.error("Local stream is not available!");
				}

				// Process queued ICE candidates (if any)
				if (queuedIceCandidates.length > 0) {
					for (const candidate of queuedIceCandidates) {
						try {
							await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
						} catch (err) {
							console.error("Error processing queued ICE candidate:", err);
						}
					}
					queuedIceCandidates = [];
				}
			}

	const audioDuration = document.getElementById('audioDuration');
		const muteCallBtn = document.getElementById('muteCallBtn');
		let isMuted = false;

			// Function to start the call
			async function startCall() {
				try {
					localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
				} catch (err) {
					console.error("Error accessing audio devices:", err);
					alert("Could not access audio devices.");
					return;
				}
				getSomeJyotish();

				await createPeerConnection();

				const offer = await peerConnection.createOffer();
				await peerConnection.setLocalDescription(offer);

				const callRequestSignal = JSON.stringify({
					type: "callRequest",
					sdp: peerConnection.localDescription
				});
				sendSignal(connection.connectionId, callRequestSignal);

		muteCallBtn.removeAttribute("disabled")
		muteCallBtn.innerHTML = '<i class="fas fa-microphone"></i>'; // Change to "unmute" icon
			muteCallBtn.classList.remove('bg-secondary'); // Revert button color when unmuted
			muteCallBtn.classList.remove('bg-warning'); // Revert button color when unmuted
			muteCallBtn.classList.add('bg-warning'); // Optional: change button color to indicate mute
			// Mute or unmute the audio
			isMuted=false;
		  remoteAudio.muted = isMuted;
			}

	muteCallBtn.addEventListener('click', function() {
			debugger
		  isMuted = !isMuted; // Toggle mute state
		  // Mute or unmute the audio
		  remoteAudio.muted = isMuted;
		  // Update the button icon based on mute state
		  if (isMuted) {
			muteCallBtn.innerHTML = '<i class="fas fa-microphone-slash"></i>'; // Change to "unmute" icon
			muteCallBtn.classList.remove('bg-warning'); // Optional: change button color to indicate mute
				muteCallBtn.classList.add('bg-secondary'); // Revert button color when unmuted
		  } else {
			muteCallBtn.innerHTML = '<i class="fas fa-microphone"></i>'; // Change to "mute" icon
				muteCallBtn.classList.remove('bg-secondary'); // Revert button color when unmuted
				muteCallBtn.classList.add('bg-warning'); // Revert button color when unmuted
		  }
		});
			// Handle the "End Call" button click event
			document.getElementById("endCallBtn").addEventListener("click", () => {
				peerConnection.close();
				peerConnection = null;
					connection.stop();
						connection=null;
								remoteAudio.currentTime = 0;
				localStream.getTracks().forEach(track => track.stop());
				localStream = null;
				document.getElementById("callStatus").innerText = "Call Ended";
				document.getElementById("endCallBtn").disabled = true;
				setTimeout(()=>{
					$(".call-BackContainer").addClass("d-none")

				},2000)
			});
</script>
