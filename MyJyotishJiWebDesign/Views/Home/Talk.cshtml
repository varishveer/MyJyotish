
<style>
	/* Background and container styling */
	body {
		font-family: 'Poppins', sans-serif;
		background: linear-gradient(135deg, #f0f4fd, #dae9f4);
		margin: 0;
		padding: 0;
	}

	.astrologer-list {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 30px;
		padding: 50px 20px;
		max-width: 1200px;
		margin: 0 auto;
	}

	/* Card styling */
	.astrologer-card {
		position: relative;
		background: white;
		border-radius: 15px;
		overflow: hidden;
		text-align: center;
		padding: 30px 20px;
		transition: transform 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
max-width:300px !important;
	}

		.astrologer-card:hover {
			transform: translateY(-20px) scale(1.05);
			box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
		}

		/* Avatar with unique animation and effect */
		.astrologer-card img {
			width: 120px;
			height: 120px;
			border-radius: 50%;
			object-fit: cover;
			margin-bottom: 15px;
			border: 5px solid #f0f4fd;
			transition: border-color 0.4s ease-in-out;
			box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
		}

		.astrologer-card:hover img {
			border-color: #ffc107;
			transform: rotate(360deg);
		}

		/* Card content styling */
		.astrologer-card h4 {
			font-size: 1.3em;
			margin: 10px 0 5px;
			color: #333;
		}

		.astrologer-card p {
			font-size: 0.95em;
			color: #666;
			margin: 8px 0;
		}

			.astrologer-card p span {
				color: #333;
				font-weight: bold;
			}

		/* Add a decorative icon for creativity */
		.astrologer-card .decorative-icon {
			position: absolute;
			top: -20px;
			right: -20px;
			font-size: 50px;
			color: rgba(255, 193, 7, 0.1);
			transition: transform 0.4s ease;
		}

		.astrologer-card:hover .decorative-icon {
			transform: rotate(45deg);
			color: rgba(255, 193, 7, 0.3);
		}

	.call-container {
		background-color: #ffffff;
		border-radius: 15px;
		width: 360px;
		padding: 20px;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;
		top: 50%;
		left: 50%;
	}

	.call-info {
		font-size: 16px;
		margin-top: 10px;
		color: #333;
		margin-bottom: 20px;
	}

	.call-buttons {
		display: flex;
		justify-content: space-evenly;
		width: 100%;
	}

		.call-buttons button {
			background-color: #4CAF50;
			color: white;
			border: none;
			border-radius: 50%;
			width: 60px;
			height: 60px;
			font-size: 18px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

			.call-buttons button:disabled {
				background-color: #ccc;
			}

			.call-buttons button:hover {
				background-color: #45a049;
			}

	.audio-container {
		margin-top: 20px;
		width: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	#remoteAudio {
		width: 100%;
		height: 60px;
		background-color: #eee;
		border-radius: 8px;
		margin-bottom: 10px;
		display: block;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
	}

	.call-status {
		font-size: 18px;
		color: #ff5722;
		font-weight: bold;
	}

	.receiver-input {
		width: 100%;
		margin-bottom: 10px;
	}

	.receiver-info {
		font-size: 14px;
		color: #555;
	}

	.call-BackContainer {
		top: 0;
		z-index: 10000000000000000000;
	}
</style>
<div class="astrologer-list mt-3" >
	<div class="row" id="astrologerList"></div>
	<!-- Astrologer results will be injected here -->
</div>

<!-- Modal call-->
<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModal2Label" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModal2Label"> Please enter your details </h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">

				<div class="row d-flex">
					<div class="col-md-4 mb-2">
						<label name="Name">Name</label>
						<input class="form-control" name="Name" id="Name" type="text" />
					</div>

					<div class="col-md-4  mb-2">
						<label name="Gender">Gender</label>
						<select id="Gender" name="Gender" class="form-select custom-field" required>
							<option value="Male" selected>Male</option>
							<option value="Female">Female</option>
							<option value="Other">Other</option>
						</select>
					</div>

					<div class="col-md-4  mb-2">
						<label name="DateOfBirth">DateOfBirth</label>
						<input class="form-control" name="DateOfBirth" id="DateOfBirth" type="date" />
					</div>
				</div>

				<div class="row d-flex">
					<div class="col-md-4 mb-2 ">
						<label name="TimeOfBirth">TimeOfBirth</label>
						<input class="form-control" name="TimeOfBirth" id="TimeOfBirth" type="time" />
					</div>
					<div class="col-md-4 mb-2 position-relative">
						<label name="PlaceOfBirth">PlaceOfBirth</label>

						<input list="PlaceOfBirthList" type="text" id="PlaceOfBirth" name="placeOfBirth" class="form-control custom-field"
							   placeholder="Enter City" autocomplete="off" />
						<div class="position-absolute w-100 bg-light d-none" id="PlaceOfBirthList">
						</div>
					</div>
					<div class="col-md-4  mb-2">
						<input id="JyotishId" hidden />
						<input id="UserId" hidden />
						<input id="Action" value="2" hidden />
					</div>
				</div>

			</div>
			<div class="modal-footer">

				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" id="DataSubmitBtn">Submit</button>
			</div>
		</div>
	</div>
</div>


<div class="vw-100 vh-100 d-flex justify-content-center d-none align-items-center bg-dark call-BackContainer position-fixed">
	<div class="call-container shadow">
		<!-- Display call info -->
		<div class="call-info">
			<div class="text-center mb-3">
				<img src="/user-not-found.png" id="jyotishCallImg" height="100" width="100" class="rounded-circle" />
			</div>
			<div id="receiverInfo" class="receiver-info fw-bold">
				Jyotish
			</div>
			<div id="audioDuration" class="audio-duration border rounded mt-2 px-2 py-1">00:00</div>
			<!-- Add real-time audio duration display here -->
		</div>

		<!-- Buttons for starting and ending the call -->
		<div class="call-buttons my-4">
			<button role="button" id="endCallBtn" class="bg-danger text-light" title="End Call" disabled><i class="fas fa-phone-alt"></i></button>
			<button role="button" id="muteCallBtn" class="bg-warning text-light" title="Mute/Unmute Call" disabled><i class="fas fa-microphone"></i></button>
		</div>

		<!-- Audio container for remote audio -->
		<div class="audio-container">
			<audio id="remoteAudio" hidden autoplay controls></audio>
			<div class="call-status" id="callStatus">Waiting for call...</div>
		</div>
	</div>
</div>

<!-- Bootstrap JS and Popper.js (needed for Bootstrap's components like tooltips) -->
<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
	
	//time management for message

	function getSomeJyotish(jyotishId) {
		$.ajax({
			url: `${BaseUrl}api/jyotish/LayoutData`,
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}`
			},
			data: { Id: jyotishId },
			success: function (res) {
				if (res.status === 200) {

					if (res.data != null) {
						$("#jyotishdetailschatheader").attr("src", res.data.image)
							$("#jyotishCallImg").attr("src", res.data.image)
						$("#ChatModalLabel").text(res.data.name)
							$("#receiverInfo").text(res.data.name)

					}
				}
					$("#jyotishCallImg").on("error",function(){
					$("#jyotishCallImg").attr("src","/user-not-found.png")
					})
			}
		})
	}
	// Function to fetch astrologers for the chat
	function GetAstroListCallChat() {
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		$.ajax({
			url: BaseUrl + 'Api/User/GetAstroListCallChat?listName=Call',
			type: 'GET',
			success:async function (response) {
				if (response.status === 200) {
					var astrologers = response.data;
					if (astrologers.length > 0) {
						displayAstrologers(astrologers);
					} else {
						let data= await getAdvertisementBanners();
						$('#astrologerList').html(`<p class="text-center">No astrologers found.</p>
				${data.data.result.length>0?`<div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mt-4  p-1">
														  <div class="card w-100 h-100 ">
																<img height="200" class="w-100 rounded" src="${BaseUrl+data.data.result[0].bannerUrl}">
														  </div>
													  </div>`:""}`);
					}
				} else {
					let data= await getAdvertisementBanners();
						$('#astrologerList').html(`<p class="text-center">No astrologers found.</p>
				${data.data.result.length>0?`<div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mt-4  p-1">
														  <div class="card w-100 h-100 ">
																<img height="200" class="w-100 rounded" src="${BaseUrl+data.data.result[0].bannerUrl}">
														  </div>
													  </div>`:""}`);
				}
				Swal.close();
				$(".jyotishProfileImages").on('error', function () {
					$(this).attr("src", '/user-not-found.png');
				});
			},
			error: function () {

				$('#astrologerList').html('<p class="text-center">An error occurred while searching for astrologers.</p>');
			}
		});
	}
	function generateFullStars() {
		return '<i class="fa fa-star"></i>'.repeat(5); // Return 5 filled stars
	}
		async function getAdvertisementBanners(){
		let data=null;
		   await $.ajax({
				  url: BaseUrl + "api/user/AdvertisementBanner",
				type: "get",
				success: function (res) {
					  data=res;
				}, error: function () {
					$('#astrologerList').html('<p>An error occurred while searching for astrologers.</p>');
				}
			})
		return data
	}
	// Function to display astrologers dynamically
	async function displayAstrologers(astrologers) {
		  let adCount=0;
		let showAdvCount=0;
		let data= await getAdvertisementBanners();
		var html = '';
		astrologers.forEach(function (astrologer) {
			var ImgSrc = BaseUrl + astrologer.profileImageUrl;
			html += `
					<div class="astrologer-card col-sm-3">
						   <a href="/Home/JyotishProfile?Id=${astrologer.id}" class="text-decoration-none">
								<i class="decorative-icon fa fa-star"></i>
										<img src=  "${ImgSrc}" class='jyotishProfileImages'  alt="${astrologer.name}">
														<div class="card-body p-0 pt-2">
																<h6 class="card-title  text-center">${astrologer.name} <i class="fa-solid text-primary fa-circle-check"></i> - ${astrologer.city}</h6>
																<p class='text-center text-warning' >${generateFullStars()}</p>
															<p class="card-text px-1 text-center" >
																 ${astrologer.expertise || "N/A"} | ${astrologer.experience != null ? astrologer.experience : 0} Years
															</p>
														</div>
							</a><br>
											<button class="btn btn-primary callBtn" id='callBtn_${astrologer.id}'   onclick="CallBtn(${astrologer.id})"
	 style="background-color: #4CAF50; border-color: #4CAF50;">
									Start Call ₹${astrologer.callCharges}/min
							</button>
						<button class="btn btn-outline-success d-none" id="waitingBtn_${astrologer.id}">Waiting...</button>

					</div>
				`
				;
	 adCount++
				if(adCount==8 &&data!=null){
					if(data.data.result.length>0){

					html+=`
	  <div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mb-2 mt-4 p-1">
												<div class="card w-100 h-100 ">
													  <img height="200" class="w-100 rounded" src="${BaseUrl+data.data.result[showAdvCount].bannerUrl}">
												</div>
											</div>`
													if(data.data.result.length-1==showAdvCount){
														  showAdvCount=0;
													}else{
												showAdvCount++;
													}
					}
				adCount=0;
				  }
			});
			   if(astrologers.length<8){
					 html+=`
		<div class="col-12 col-sm-12 col-md-12 rounded border-0 col-lg-12 mt-4 mb-2 p-1">
												  <div class="card w-100 h-100 ">
														<img height="200" class="w-100 rounded" src="${BaseUrl+data.data.result[showAdvCount].bannerUrl}">
												  </div>
											  </div>`
					}
		$('#astrologerList').html(html);
		$(".jyotishProfileImages").on('error', function () {
					$(this).attr("src", '/user-not-found.png');
				});
	}

	// Initialize the function to get astrologers on page load
	GetAstroListCallChat();


	let userConnectionId;
	let utargetConnectionId;
	let checkconnectionRequest=true;
	 $('#DataSubmitBtn').on('click',async function () {

		var astrologerId = $('#JyotishId').val();
		var Name = $("#Name").val();
		var Gender = $("#Gender").val();
		var DateOfBirth = $("#DateOfBirth").val();
		var TimeOfBirth = $("#TimeOfBirth").val();
		var PlaceOfBirth = $("#PlaceOfBirth").val();

		var UserId = localStorage.getItem('userId');
		let checkChatValidation=false;
		await $.ajax({
					url: BaseUrl + "api/User/getservicePriceAndWalletAmount", // Ensure BaseUrl is properly defined
					method: "GET",
					headers: {
						'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
					},
					data: {
					jyotishId: astrologerId, userId: UserId, type:"call"
					}, // Corrected JSON.stringify
					contentType: "application/json", // Ensure content type is set to JSON
					success: function (res) {
						debugger
						if (res.status === 200) {
							if (res.userWallet > (res.charges * 5)) {
								checkChatValidation=true
							}else{
								checkChatValidation = false;
						$("#exampleModal3").modal("hide")

								Swal.fire({
									title: "<strong>Recharge Now</strong>",
									icon: "info",
									html: `
								Currently you have <b class='text-danger'>₹${res.userWallet}</b > in your wallet minimum required <b class='text-success'>₹${res.charges * 5}<b/></br>
			<a class='btn btn-success' target="_blank" href="/Home/Wallet" autofocus>Recharge Now</a>
	  `,
									showCloseButton: true,
									showCancelButton: true,
									focusConfirm: false,
									confirmButtonText: `
			Later!
	  `,
									confirmButtonAriaLabel: "Later!",
									cancelButtonText: `
		Close
	  `,							cancelButtonAriaLabel: "Close"
								});
							}
						}
					}

	})
	if(checkChatValidation){
		var DataContainer = {
			Name: Name,
			Gender: Gender,
			DateOfBirth: DateOfBirth,
			TimeOfBirth: TimeOfBirth,
			PlaceOfBirth: PlaceOfBirth,
			JyotishId: astrologerId,
			UserId: UserId,
			Action: 2
		}
		if (TimeOfBirth == "" || Name == "" || Gender == "" || DateOfBirth == "" || PlaceOfBirth == "" || JyotishId == "" || UserId=="" || Action=="") {
					Swal.fire({
						title: "warning",
						text: "all fields are required",
						icon: "warning"
					})

		} else {
		$.ajax({
			url: BaseUrl + "api/User/AddUserServiceRecord", // Ensure BaseUrl is properly defined
			method: "POST",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
			},
			data: JSON.stringify(DataContainer), // Corrected JSON.stringify
			contentType: "application/json", // Ensure content type is set to JSON
			success: function (response) {
				if (response.status === 200) {
					establishedConnectionForSendRequest(astrologerId).then((socket) => {
								debugger
								if (socket) {
									socket.onopen =async function (event) {
										console.log('WebSocket connection established:', event);
										let call="call"
										if (astrologerId) {
											$("#exampleModal2").modal("hide")
											await startSignalR();
											socket.send(`${astrologerId}:${userConnectionId}:${call}`);
									$("#callBtn_" + astrologerId).hide();
											$("#waitingBtn_"+astrologerId).removeClass("d-none")
										}
									};
									socket.onmessage =async function (event) {
										let response = JSON.parse(event.data)
										console.log(response)
										if (response.data) {

											socket.close()
											debugger
											if(response.type=="call"){
											utargetConnectionId=response.roomId
			await startCall(astrologerId);
			document.getElementById("callStatus").innerText = "Connected";
			document.getElementById("endCallBtn").disabled = false;
			$(".call-BackContainer").removeClass("d-none")
										socket.close()
										}
								} else if(!response.data){
											if (response.anotherRequest && !response.notAvailable) {
												Swal.fire({
													text: "Another Request are already in Progress..",
													title: "warning",
													icon: "warning"
												});
											}else {
											Swal.fire({
												text: "Currently jyotish are busy..",
												title: "warning",
												icon: "warning"
											});
										}
										socket.close()
									$("#callBtn_" + astrologerId).show();
									$("#waitingBtn_" + astrologerId).addClass("d-none")
										} 
								};

									socket.onerror = function (event) {
										console.error('WebSocket error observed:', event);
										Swal.fire({
											text: "some error occured while making connection",
											title: "error",
											icon: "error"
										});
									};

									socket.onclose = function (event) {
										console.log('WebSocket connection closed:', event);

								$("#callBtn_" + astrologerId).show();

										$("#waitingBtn_"+astrologerId).addClass("d-none")

									};


								}
							})
				} else {
					// Handle unexpected response status (if needed)
					Swal.fire({
						title: "Error!",
						text: "There was an issue with the response.",
						icon: "error"
					});
				}
			},
			error: function (xhr, status, error) {
				// Error case: Handle request errors
				Swal.fire({
					title: "Error!",
					text: "Something went wrong. Please try again later.",
					icon: "error"
				});
			}
		});
		}
		}
	});

	var UserId = localStorage.getItem('userId');
	if(UserId != null && UserId != undefined)
	{
		GetUserDataForService(UserId);
	}
	function establishedConnectionForSendRequest(jyotishId) {
		let socket = new WebSocket(`wss://api.myjyotishg.in/api/chat/sendChatRequest?id=${UserId}&receiverId=${jyotishId}&sendBy=client`);
		return new Promise((res, rej) => {
			if (socket) {

				res(socket)
			} else {
				rej(false)
			}
		});
	}
	 function GetUserDataForService(Id) {
		$.ajax({
			url: `${BaseUrl}api/User/GetUserDataForService?Id=${Id}`,
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}`
			},
			success: function (response) {
				if (response.status === 200) {
					debugger
					$('#Name').val(response.data.name);
					$('#Gender').val(response.data.gender);
					$('#DateOfBirth').val(response.data.dateOfBirth.split('T')[0]);
					$('#TimeOfBirth').val(response.data.timeOfBirth);
					$('#PlaceOfBirth').val(response.data.placeOfBirth);

				}
			},
			error: function (xhr, status, error) {

				console.log("Error:", error);
				console.log("Status:", status);
				console.log("XHR:", xhr);
			}
		});
	}

	function CallBtn(id)
	{
		if (localStorage.getItem("userId") == null || localStorage.getItem("Token") == null) {
			$("#exampleModal").modal("hide")
			Swal.fire({
				title: "Authentication Required",
				text: "Please login for make call with astrologers",
				icon: "warning",
				showCancelButton: true,
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: "Login"
			}).then((result) => {
				if (result.isConfirmed) {
					location.href = "/home/login"
				}
			})


		} else {
		 $('#JyotishId').val(id);
			$("#exampleModal2").modal("show")
		}
	}

	async function getUserWallet(userId,jyotishId){
		let walletAmount;
		await $.ajax({
			url: BaseUrl + "api/User/getservicePriceAndWalletAmount", // Ensure BaseUrl is properly defined
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
			},
			data: {
				jyotishId: jyotishId, userId: userId, type: "call"
			}, // Corrected JSON.stringify
			contentType: "application/json", // Ensure content type is set to JSON
			success: function (res) {
				if (res.status === 200) {
					walletAmount = res;
				}	
			}

		})
		return walletAmount;
	}

	async function changeUserServiceStatus(userId,status){
		let checkServiceStatus=false;
	await $.ajax({
			url: BaseUrl + "api/User/changeUserActiveStatus", // Ensure BaseUrl is properly defined
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token")}` // Retrieve token from localStorage
			},
			data: {
				userId: userId,status:status
			}, // Corrected JSON.stringify
			success: function (res) {
				if (res.status === 200) {
					checkServiceStatus=true
				}
			}
	})
	return checkServiceStatus;
	}

		window.addEventListener("beforeunload", function (event) {
		event.preventDefault();
		debugger
		if(jyotishConnected){
		applyCallCharges(localStorage.getItem("userId"),localStorage.getItem("JyotishIdForCall"),totalSecond)
		}

		event.returnValue = '';
	});

		//call mamangement

		 let connection;
			let peerConnection;
			let localStream;
			let queuedIceCandidates = [];
			const configuration = {
				iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]  // STUN server to get ICE candidates
			};

			 // Start the SignalR connection
			async function startSignalR() {
				connection = new signalR.HubConnectionBuilder()
					.withUrl(`https://localhost:7118/callhub?userId=${localStorage.getItem("userId")}&sendby=client`)  // Replace with the actual URL of your SignalR Hub
					.build();

				connection.on("ReceiveSignal", async (fromConnectionId, signalData) => {
					console.log("Signal received from:", fromConnectionId, "Data:", signalData);
					let signal = JSON.parse(signalData);

					// Handle a Call Request
					if (signal.type === "callRequest") {
						if (!peerConnection) {
							await createPeerConnection();
						}
						// Set the remote description (SDP) from the received signal
						if (signal.sdp) {
							try {
								await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp));
								// Create an answer to send back to the sender
								const answer = await peerConnection.createAnswer();
								await peerConnection.setLocalDescription(answer);
								sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
							} catch (err) {
								console.error("Error during call acceptance negotiation:", err);
							}
						}
					}

					// Handle SDP (Offer/Answer) Negotiation
					else if (signal.sdp) {
						if (!peerConnection) {
							console.log("peerConnection is not created. Creating now...");
							await createPeerConnection();
						}
						try {
							await peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp));
						} catch (err) {
							console.error("Error setting remote description:", err);
						}
						if (signal.sdp.type === "offer") {
							console.log("Received offer. Creating answer...");
							const answer = await peerConnection.createAnswer();
							await peerConnection.setLocalDescription(answer);
							sendSignal(connection.connectionId, JSON.stringify({ sdp: peerConnection.localDescription }));
						}
					}

					// Handle ICE Candidate
					else if (signal.ice) {
						console.log("ICE candidate received:", signal.ice);
						if (peerConnection) {
							try {
								await peerConnection.addIceCandidate(new RTCIceCandidate(signal.ice));
							} catch (err) {
								console.error("Error adding ICE candidate:", err);
							}
						} else {
							queuedIceCandidates.push(signal.ice);
						}
					}
				});

				try {
					await connection.start();
					console.log("SignalR connected, connection ID:", connection.connectionId);
					userConnectionId= connection.connectionId
				} catch (err) {
					console.error("Error connecting to SignalR:", err);
				}
			}

			  function sendSignal(senderId, signalData) {
				let targetConnectionId = utargetConnectionId;
				if (!targetConnectionId) {
					targetConnectionId = prompt("Receiver connection ID is empty. Please enter the receiver connection ID:");
					if (!targetConnectionId) {
						console.error("No receiver connection ID provided.");
						return;
					}
				}
				let userId = localStorage.getItem("userId");
				console.log("Sending signal from", senderId, "to", targetConnectionId, "data:", signalData);
				connection.invoke("SendSignal", senderId, targetConnectionId, signalData, "client")
					.catch(err => console.error("Error invoking SendSignal:", err));
			}

			// Function to create PeerConnection
			async function createPeerConnection() {
				peerConnection = new RTCPeerConnection(configuration);

				// Handle ICE candidates
				peerConnection.onicecandidate = event => {
					if (event.candidate) {
						console.log("Local ICE candidate generated:", event.candidate);
						sendSignal(connection.connectionId, JSON.stringify({ ice: event.candidate }));
					}
				};

				// Handle receiving remote tracks
				peerConnection.ontrack = event => {
					console.log("Remote track received:", event.streams[0]);
					const remoteAudio = document.getElementById("remoteAudio");
					const remoteStream = event.streams[0];
					remoteAudio.srcObject = remoteStream;
					remoteAudio.muted = false;
					remoteAudio.volume = 1.0;
					remoteAudio.play().catch(err => {
						console.error("Error playing remote audio:", err);
					});
				};

				// Handle the state of the peer connection
				peerConnection.onconnectionstatechange = () => {
					console.log("Connection state:", peerConnection.connectionState);
				};

				// Add the local stream tracks to the peer connection
				if (localStream) {
					localStream.getTracks().forEach(track => {
						peerConnection.addTrack(track, localStream);
					});
				} else {
					console.error("Local stream is not available!");
				}

				// Process queued ICE candidates (if any)
				if (queuedIceCandidates.length > 0) {
					console.log("Processing queued ICE candidates...");
					for (const candidate of queuedIceCandidates) {
						try {
							await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
						} catch (err) {
							console.error("Error processing queued ICE candidate:", err);
						}
					}
					queuedIceCandidates = [];
				}
			}


				// Get the audio element and the duration display element
		const remoteAudio = document.getElementById('remoteAudio');
		const audioDuration = document.getElementById('audioDuration');
		const muteCallBtn = document.getElementById('muteCallBtn');
		let isMuted = false;

			// Function to start the call
			async function startCall(jyotishId) {
				try {
					localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });
					console.log("Local audio stream captured:", localStream);
				} catch (err) {
					console.error("Error accessing audio devices:", err);
					alert("Could not access audio devices.");
					return;
				}
				getSomeJyotish(jyotishId);

				await createPeerConnection();

				const offer = await peerConnection.createOffer();
				await peerConnection.setLocalDescription(offer);
				console.log("Local SDP set (offer):", peerConnection.localDescription.sdp);

				const callRequestSignal = JSON.stringify({
					type: "callRequest",
					sdp: peerConnection.localDescription
				});
				sendSignal(connection.connectionId, callRequestSignal);

		remoteAudio.ontimeupdate = function() {
		  const currentTime = remoteAudio.currentTime; // Get the current playback time
		  const minutes = Math.floor(currentTime / 60); // Get the minutes
		  const seconds = Math.floor(currentTime % 60); // Get the seconds

		  // Format the time in MM:SS format
		  const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

		  // Update the displayed duration
			audioDuration.textContent = formattedTime;


		};

		muteCallBtn.removeAttribute("disabled")
		muteCallBtn.innerHTML = '<i class="fas fa-microphone"></i>'; // Change to "unmute" icon
			muteCallBtn.classList.remove('bg-secondary'); // Revert button color when unmuted
			muteCallBtn.classList.remove('bg-warning'); // Revert button color when unmuted
			muteCallBtn.classList.add('bg-warning'); // Optional: change button color to indicate mute
			// Mute or unmute the audio
			isMuted=false;
		  remoteAudio.muted = isMuted;

			}

	muteCallBtn.addEventListener('click', function() {
			debugger
		  isMuted = !isMuted; // Toggle mute state
		  // Mute or unmute the audio
		  remoteAudio.muted = isMuted;

		  // Update the button icon based on mute state
		  if (isMuted) {
			muteCallBtn.innerHTML = '<i class="fas fa-microphone"></i>'; // Change to "unmute" icon
			muteCallBtn.classList.add('bg-warning'); // Optional: change button color to indicate mute
			muteCallBtn.classList.remove('bg-secondary'); // Revert button color when unmuted
		  } else {
			muteCallBtn.innerHTML = '<i class="fas fa-microphone-slash"></i>'; // Change to "mute" icon
			muteCallBtn.classList.remove('bg-warning'); // Revert button color when unmuted
			muteCallBtn.classList.add('bg-secondary'); // Revert button color when unmuted
		  }
		});
			// Handle the "End Call" button click event
			document.getElementById("endCallBtn").addEventListener("click", () => {
				peerConnection.close();
				peerConnection = null;
				localStream.getTracks().forEach(track => track.stop());
				localStream = null;
				document.getElementById("callStatus").innerText = "Call Ended";
				document.getElementById("endCallBtn").disabled = true;
				setTimeout(()=>{
					$(".call-BackContainer").addClass("d-none")

				},2000)
			});
</script>
