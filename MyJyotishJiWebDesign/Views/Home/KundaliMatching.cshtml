<style>
    /* Example Custom CSS */
    .card {
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: #4A90E2;
    }

    input[type="text"], select {
        border-radius: 5px;
    }

    #PlaceOfBirthList_girl {
        position: absolute;
        height: 250px;
        padding: 10px;
        overflow: auto;
    }

    #PlaceOfBirthList_boy {
        position: absolute;
        height: 250px;
        padding: 10px;
        overflow: auto;
    }

    .pOBPtag:hover {
        background-color: skyblue;
        color: white;
    }
</style>

<div class="container-fluid py-4 col-8">
    <h3 class="text-center mb-4">Fill Up Partner's Detail</h3>

    <div class="row">
        <!-- Boy's Details Section -->
        <div class="col-md-4">
            <div class="card p-4 shadow-sm">
                <h5 class="card-title text-center mb-3">Boy's Details</h5>

                <div class="form-group">
                    <label for="name_boy">Name</label>
                    <input type="text" name="name_boy" id="name_boy" class="form-control" placeholder="Enter name" required>
                </div>

                <div class="form-group row">
                    <div class="col-md-4">
                        <label for="day_boy">Day</label>
                        <select name="day_boy" id="day_boy" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="month_boy">Month</label>
                        <select name="month_boy" id="month_boy" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="year_boy">Year</label>
                        <select name="year_boy" id="year_boy" class="form-control" required>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-4">
                        <label for="hour_boy">Hour</label>
                        <select name="hour_boy" id="hour_boy" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="min_boy">Minute</label>
                        <select name="min_boy" id="min_boy" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="sec_boy">Second</label>
                        <select name="sec_boy" id="sec_boy" class="form-control" required>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="place_boy">Birth Place</label>


                    <input list="PlaceOfBirthList_boy" type="text" name="place_boy" id="place_boy" class="form-control  " placeholder="Enter birth place" autocomplete="off" required>


                    <div class="position-absolute bg-light d-none" id="PlaceOfBirthList_boy">
                    </div>
                </div>
            </div>
        </div>

        <!-- Girl's Details Section -->
        <div class="col-md-4">
            <div class="card p-4 shadow-sm">
                <h5 class="card-title text-center mb-3">Girl's Details</h5>

                <div class="form-group">
                    <label for="name_girl">Name</label>
                    <input type="text" name="name_girl" id="name_girl" class="form-control" placeholder="Enter name" required>
                </div>

                <div class="form-group row">
                    <div class="col-md-4">
                        <label for="day_girl">Day</label>
                        <select name="day_girl" id="day_girl" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="month_girl">Month</label>
                        <select name="month_girl" id="month_girl" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="year_girl">Year</label>
                        <select name="year_girl" id="year_girl" class="form-control" required>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-4">
                        <label for="hour_girl">Hour</label>
                        <select name="hour_girl" id="hour_girl" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="min_girl">Minute</label>
                        <select name="min_girl" id="min_girl" class="form-control" required>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="sec_girl">Second</label>
                        <select name="sec_girl" id="sec_girl" class="form-control" required>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="place_girl">Birth Place</label>
                    <input list="PlaceOfBirthList_girl" type="text" name="place_girl" id="place_girl" class="form-control  " placeholder="Enter birth place" autocomplete="off" required>


                    <div class="position-absolute bg-light d-none " id="PlaceOfBirthList_girl">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4  ">


            <div class="card h-100 p-4 shadow-sm">
                <h5 class="card-title text-center mb-3">Saved Matches</h5>
                <div>

                    <!-- Search Box -->
                    <div>
                        <form novalidate action="search_box">
                            <div class="input-group mb-3">
                                <label class="input-group-text" for="inputGroupSelect01"><i class="fa fa-search "></i></label>

                                <input type="search" name="search" id="inputGroupSelect01" aria-label="Search" class="form-control input-group-text" placeholder="Search match by name">

                            </div>
                        </form>
                    </div>

                    <h5>Recently Opened</h5>

                    <!-- No Data Message -->
                    <div>
                        <div>
                            <div>No sufficient data available!</div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="text-center mt-4">
        <button type="button" id="matchHoroscope" class="btn btn-primary btn-lg">Match Horoscope</button>
    </div>
</div>


<script>

    async function loadPlaceOfBirth_girl(city) {
        if (!city) return;

        try {
            const response = await fetch(BaseUrl + `Api/Account/PlaceOfBirthList?City=${encodeURIComponent(city)}`);
            const data = await response.json();
            const $placeOfBirthDropdown = $('#PlaceOfBirthList_girl');

            $('#PlaceOfBirthList_girl').removeClass('d-none');
            $placeOfBirthDropdown.empty();
            data.data.forEach(placeOfBirth => {
                $placeOfBirthDropdown.append(`<p class="pOBPtag" onClick="setPlace_girl('${placeOfBirth}')"> ${placeOfBirth}</p>`);
            });
        } catch (error) {
            console.error('Error fetching PlaceOfBirth:', error);
        }
    }

    function setPlace_girl(svalue) {

        $('#PlaceOfBirthList_girl').addClass('d-none');
        $('#place_girl').val(svalue);
    }
    $('#place_girl').on('keyup', function () {

        $('#PlaceOfBirthList_girl').show();
        const city = $(this).val();
        loadPlaceOfBirth_girl(city);

        // Replace with your Google Maps API Key



    });



    async function loadPlaceOfBirth_boy(city) {
        if (!city) return;

        try {
            const response = await fetch(BaseUrl + `Api/Account/PlaceOfBirthList?City=${encodeURIComponent(city)}`);
            const data = await response.json();
            const $placeOfBirthDropdown = $('#PlaceOfBirthList_boy');

            $('#PlaceOfBirthList_boy').removeClass('d-none');
            $placeOfBirthDropdown.empty();
            data.data.forEach(placeOfBirth => {
                $placeOfBirthDropdown.append(`<p class="pOBPtag" onClick="setPlace_boy('${placeOfBirth}')"> ${placeOfBirth}</p>`);
            });
        } catch (error) {
            console.error('Error fetching PlaceOfBirth:', error);
        }
    }

    function setPlace_boy(svalue) {

        $('#PlaceOfBirthList_boy').addClass('d-none');
        $('#place_boy').val(svalue);
    }
    $('#place_boy').on('keyup', function () {

        $('#PlaceOfBirthList_boy').show();
        const city = $(this).val();
        loadPlaceOfBirth_boy(city);
        // Replace with your Google Maps API Key


    });



    function LoadData() {

        let currentDate = new Date();
        let year = currentDate.getFullYear();
        for (var i = 1; i <= 100; i++) {
            if (i <= 31) {
                $('#day_girl').append(` <option value="${i}">${i}</option>`);
                $('#day_boy').append(` <option value="${i}">${i}</option>`);
            }


            if (i <= 12) {

                $('#month_girl').append(` <option value="${i}">${i}</option>`);
                $('#month_boy').append(` <option value="${i}">${i}</option>`);
            }

            $('#year_girl').append(` <option value="${year}">${year}</option>`);
            $('#year_boy').append(` <option value="${year}">${year}</option>`);
            year = year - 1;

            if (i <= 60) {

                $('#hour_girl').append(` <option value="${i}">${i}</option>`);
                $('#hour_boy').append(` <option value="${i}">${i}</option>`);
                $('#min_girl').append(` <option value="${i}">${i}</option>`);
                $('#min_boy').append(` <option value="${i}">${i}</option>`);
                $('#sec_girl').append(` <option value="${i}">${i}</option>`);
                $('#sec_boy').append(` <option value="${i}">${i}</option>`);
            }

        }

    }

    LoadData();



    async function kundaliMatchingApi() {

        var boyName = $('#name_boy').val();
        var boyDoB = `${$('#day_boy').val()}-${$('#month_boy').val()}-${$('#year_boy').val()}`;
        var boyToB = `${$('#hour_boy').val()}:${$('#min_boy').val()}:${$('#sec_boy').val()}`;
        var boyDate = $('#day_boy').val();
        var boyMonth = $('#month_boy').val();
        var boyYear = $('#year_boy').val();
        var boyhour = $('#hour_boy').val();
        var boymin = $('#min_boy').val();
        var boySec = $('#sec_boy').val();
        var boyPlace = $('#place_boy').val();

        var girlName = $('#name_girl').val();
        var girlDoB = `${$('#day_girl').val()}-${$('#month_girl').val()}-${$('#year_girl').val()}`;
        var girlToB = `${$('#hour_girl').val()}:${$('#min_girl').val()}:${$('#sec_girl').val()}`;
        var girlDate = $('#day_girl').val();
        var girlMonth = $('#month_girl').val();
        var girlYear = $('#year_girl').val();
        var girlhour = $('#hour_girl').val();
        var girlmin = $('#min_girl').val();
        var girlSec = $('#sec_girl').val();
        var girlPlace = $('#place_girl').val();
        console.log(girlPlace);
        console.log(boyPlace);


        await GetGeoLocation(girlPlace, 'girl');
        await GetGeoLocation(boyPlace, 'boy');

        var glatitude = $('#place_girl').attr('data-glatitude');
        var glongitude = $('#place_girl').attr('data-glongitude');

        var blatitude = $('#place_boy').attr('data-blatitude');
        var blongitude = $('#place_boy').attr('data-blongitude');

        var gtimezone = await getTimezone(glatitude, glongitude);
        var btimezone = await getTimezone(blatitude, blongitude);

        var DataContainer = {
            "female": {
                "year": parseInt(girlYear),
                "month": parseInt(girlMonth),
                "date": parseInt(girlDate),
                "hours": parseInt(girlhour),
                "minutes": parseInt(girlmin),
                "seconds": parseInt(girlSec),
                "latitude": parseFloat(glatitude),
                "longitude": parseFloat(glongitude),
                "timezone": parseFloat(gtimezone)
            },
            "male": {
                "year": parseInt(boyYear),
                "month": parseInt(boyMonth),
                "date": parseInt(boyDate),
                "hours": parseInt(boyhour),
                "minutes": parseInt(boymin),
                "seconds": parseInt(boySec),
                "latitude": parseFloat(blatitude),
                "longitude": parseFloat(blongitude),
                "timezone": parseFloat(btimezone)
            },
            "config": {
                "observation_point": "topocentric",
                "language": "en",
                "ayanamsha": "lahiri"
            }
        }

        console.log(DataContainer);
        $.ajax({
            url: 'https://json.freeastrologyapi.com/match-making/ashtakoot-score',
            type: 'POST',

            headers: {
                'x-api-key': 'y8gZTCePup5YM0XGzDmRf5UbZo4IMcTR9Wg3CZ6Z'
            },
            contentType: 'application/json',
            data: JSON.stringify(DataContainer),
            success: function (response) {
                console.log(response);
            },
            error: function (xhr, status, error) {
                console.error("Error: " + error);
                Swal.fire({
                    title: 'error',
                    text: 'Something went wrong',
                    icon: 'error'
                })
            }
        });




    }
    async function GetGeoLocation(place, type) {
        debugger;


        const url = `https://nominatim.openstreetmap.org/search?q=${place}&format=json`;

        await fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data != null) {
                    const latitude = data[0].lat;
                    const longitude = data[0].lon;

                    if (type == 'boy') {
                        $('#place_boy').attr('data-blatitude', latitude);
                        $('#place_boy').attr('data-blongitude', longitude);
                    }
                    if (type == 'girl') {
                        $('#place_girl').attr('data-glatitude', latitude);
                        $('#place_girl').attr('data-glongitude', longitude);
                    }


                } else {
                    Swal.fire({
                        title: 'error',
                        text: 'Something went wrong',
                        icon: 'error'
                    })
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    title: 'error',
                    text: 'Something went wrong',
                    icon: 'error'
                })
            });
    }

    async function getTimezone(latitude, longitude) {

        var timestamp = Math.floor(Date.now() / 1000);  // Current timestamp in seconds
        var accessKey = "a1866a87e357e1b13a1ad62ee2e061f3";  // Replace with your Google Maps API key

        // Construct URL for the Google Time Zone API
        var url = `https://api.positionstack.com/v1/reverse?access_key=${accessKey}&query=${latitude},${longitude}&timezone_module=1`;
        var timezone
        // Fetch timezone data from Google API
        await fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data != null) {
                    debugger;

                    const offsetSec = data.data[0].timezone_module.offset_sec;

                    const offsetHours = Math.floor(offsetSec / 3600);  // Get full hours
                    const offsetMinutes = (offsetSec % 3600) / 60;  // Get the remaining minutes as a decimal

                    // Combine hours and minutes into a decimal format
                    const offsetDecimal = (offsetHours + offsetMinutes / 60).toFixed(1); // To ensure the result is in the form of +X.X

                    // Format the output as +X.X

                    timezone = offsetDecimal;

                } else {
                    Swal.fire({
                        title: 'error',
                        text: 'Something went wrong while fetching data',
                        icon: 'error'
                    })
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    title: 'error',
                    text: 'Something went wrong',
                    icon: 'error'
                })
            });
        return timezone
    }


    $('#matchHoroscope').on('click', function () {
        kundaliMatchingApi();
    })
</script>

