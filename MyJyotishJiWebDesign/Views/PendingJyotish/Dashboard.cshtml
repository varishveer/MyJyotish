@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "PendingJyotishLayout";
}
<style>
    .container {
        font-family: sans-serif;
        border-radius: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        padding: 20px;
        background-color: white;
    }

    .header {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
    }

        .header h1 {
            font-size: 1.2em;
            font-weight: bold;
            margin: 0;
        }

    .close-button {
        border: none;
        background-color: transparent;
        font-size: 1.2em;
        cursor: pointer;
    }

    .calendar {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        justify-content: center;
    }

    .arrow {
        border: none;
        background-color: transparent;
        font-size: 1.2em;
        cursor: pointer;
        margin: 0 10px;
    }

    .dates {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .date {
        display: flex;
        flex-direction: column;
        align-items: center;
        border-radius: 5px;
        color: #7F56D9;
        background-color: #f0f0f0;
        padding: 10px 20px;
        cursor: pointer;
    }

        .date.active {
            background-color: #f0f0f0;
        }

    .day {
        font-weight: bold;
    }

    .time-selector {
        justify-content: center;
        margin-bottom: 20px;
    }

        .time-selector h2 {
            font-size: 1em;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .time-zone {
        justify-content: center;
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .location {
        font-size: 0.9em;
        color: #666;
    }

    .duration {
        font-size: 0.9em;
        color: #666;
    }

    .time-buttons {
        justify-content: center;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        color: #7F56D9;
    }

    .time-button {
        border: none;
        background-color: #f0f0f0;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        color: #7F56D9;
        flex-wrap: wrap;
    }



        .time-button:hover {
            background-color: #e0e0e0;
        }

        .time-button.active {
            background-color: #007bff;
            color: white;
        }

    .footer {
        text-align: center;
        margin-top: 20px;
    }

        .footer span {
            font-size: 0.8em;
            color: #666;
        }
</style>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<div class="container-fluid pt-4 px-4 ">
    <div class="bg-light text-center rounded p-4">
        <div class="row">
            <div class="col-md-6 offset-md-3">
                <div class="alert alert-secondary " role="alert">
                    <span class="font-weight-bold">Status:</span>
                    <span id="status" class="ml-2"></span>
                </div>
            </div>
        </div>
        <div class="slotBookingDiv">
            <div class="header">
                <h1>Pick a time slot for your interview</h1>

            </div>
            <div class="calendar">

                <div class="dates">
                </div>

            </div>
            <div class="time-selector">
                <h2>Select a time slot</h2>

                <div class="time-buttons">
                </div>
            </div>
            <div class="submitButton ">
                <button class="btn btn-success">
                    Book Now
                </button>

            </div>
        </div>
       
   
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
       
        // Retrieve the user role from local storage
        var Status = localStorage.getItem("userRole");

        // Get the status span element by its ID
        var StatusSpan = document.getElementById("status");

        // Set the text content of the status span to the retrieved value
        if (StatusSpan) {
            StatusSpan.textContent = Status || "No role assigned"; // Fallback text
        }
    });
    
</script>


<script>
    $(document).ready(function () {
        const apiUrl = `https://localhost:7118/Api/PendingJyotish/SlotList`;
        const token = localStorage.getItem('Token3');
        const userId = localStorage.getItem('Id'); // Assuming this is the Jyotish ID

        let selectedDate = null;
        let selectedTime = null;

        // Make an AJAX GET request to retrieve the data
        $.ajax({
            url: apiUrl,
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            success: function (response) {
                // Grouping dates and times from the API response
                const dateTimeMap = {};
                response.data.forEach(item => {
                    if (!dateTimeMap[item.date]) {
                        dateTimeMap[item.date] = [];
                    }
                    dateTimeMap[item.date].push(item.time);
                });

                // Display dates on the webpage
                const $dateContainer = $('.dates');
                const $timeContainer = $('.time-buttons');

                for (const date in dateTimeMap) {
                    // Create date element
                    const $dateElement = $(`<div class='date' data-date='${date}'> <span class="day">${date}</span></div>`);
                    $dateContainer.append($dateElement);
                }

                // Click event to show/hide times when a date is clicked
                $('.date').on('click', function () {
                    // Clear previous times
                    $timeContainer.empty();

                    // Retrieve the clicked date and update `selectedDate`
                    selectedDate = $(this).data('date');

                    // Create corresponding time buttons for the selected date
                    dateTimeMap[selectedDate].forEach(time => {
                        const $timeElement = $(`<button class="time-button" data-date='${selectedDate}' data-time='${time}'>${time}</button>`);
                        $timeContainer.append($timeElement);
                    });

                    // Attach event listener for each new time button
                    $('.time-button').on('click', function () {
                        // Update `selectedTime` when a time button is clicked
                        selectedTime = $(this).data('time');

                        // Highlight selected time button
                        $('.time-button').removeClass('selected');
                        $(this).addClass('selected');
                    });
                });
            },
            error: function (error) {
                console.error('Error fetching slot data:', error);
            }
        });

        // Click event for the "Book Now" button
        $('.submitButton button').on('click', function () {
            if (!selectedDate || !selectedTime) {
                alert("Please select both a date and a time slot before booking.");
                return;
            }

            // Define the payload to send to the API
            const postData = {
                Date: selectedDate,
                Time: selectedTime,
                JyotishId: userId
            };

            // Make an AJAX POST request to send the selected date and time
            $.ajax({
                url: 'https://localhost:7118/Api/PendingJyotish/AddSlotBooking', // Replace with your API endpoint
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify(postData), // Convert JS object to JSON string
                success: function (response) {
                    if (response.status == 200) {
                      
                        Swal.fire({
                            title: "Slot successfully booked",
                            text: `Slot successfully booked for: ${selectedDate} at ${selectedTime}`,
                            icon: "success"
                        });
                    }
                    else if(response.status == 400) {
                        Swal.fire({
                            title: "Invalid User",
                            text: ``,
                            icon: "error"
                        });
                    }
                    else if (response.status == 409) {
                        Swal.fire({
                            title: "Already Booked",
                            text: ``,
                            icon: "warning"
                        });
                    }
                                    },
                error: function (error) {
                    console.error('Error booking slot:', error);
                }
            });
        });
    });

</script>