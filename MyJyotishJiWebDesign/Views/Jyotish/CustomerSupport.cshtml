@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "JyotishLayout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Call with SignalR + WebRTC</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <h1>Voice Call with SignalR + WebRTC</h1>
    <button onclick="startCall()">Start Call</button>
    <button onclick="hangUp()">Hang Up</button>
    <audio id="remoteAudio" autoplay></audio>
    <audio id="localAudio" autoplay muted></audio>

    <script>
        // Initialize necessary variables
        let callState = "idle"; // Idle, calling, ringing, active, ended
        let peerConnection;
        let localStream;
        let remoteStream;

        // Establish a SignalR connection
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("https://localhost:7118/callhub")
            .build();

        // Event listener for receiving the call offer
        connection.on("ReceiveCallOffer", function (offer) {
            if (callState === "idle") {
                callState = "ringing";
                alert("Incoming call!");
                // Accept the call automatically (or show buttons to accept/reject)
                sendCallAnswer("accept");
            }
        });

        // Event listener for receiving call answer
        connection.on("ReceiveCallAnswer", function (answer) {
            if (answer === "accept") {
                callState = "active";
                alert("Call accepted!");
                setupPeerConnection();
            }
        });

        // Event listener for receiving ICE candidates
        connection.on("ReceiveIceCandidate", function (candidate) {
            if (peerConnection) {
                peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            }
        });

        // Event listener for when the call ends
        connection.on("ReceiveHangUp", function () {
            callState = "ended";
            alert("Call ended.");
            endCall();
        });

        // Start the SignalR connection
        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        // Function to initiate a call
        function startCall() {
            callState = "calling";  // Update call state to calling
            peerConnection = new RTCPeerConnection();

            // Get user's media (audio)
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then((stream) => {
                    localStream = stream;
                    document.getElementById("localAudio").srcObject = localStream;
                    stream.getTracks().forEach(track => {
                        peerConnection.addTrack(track, stream);
                    });

                    // Create an offer and send it to the other user
                    peerConnection.createOffer()
                        .then(offer => {
                            return peerConnection.setLocalDescription(offer);
                        })
                        .then(() => {
                            sendCallOffer(peerConnection.localDescription);
                        })
                        .catch(console.error);

                    // Handle ICE candidates
                    peerConnection.onicecandidate = (event) => {
                        if (event.candidate) {
                            sendIceCandidate(event.candidate);
                        }
                    };

                    // Handle remote stream
                    peerConnection.ontrack = (event) => {
                        remoteStream = event.streams[0];
                        document.getElementById("remoteAudio").srcObject = remoteStream;
                    };
                })
                .catch(console.error);
        }

        // Function to send call offer to the other user
        function sendCallOffer(offer) {
            const toUserId = "user2";  // Target user ID for the call
            connection.invoke("SendCallOffer", toUserId, offer)
                .catch(console.error);
        }

        // Function to send call answer
        function sendCallAnswer(answer) {
            const toUserId = "user1";  // Target user ID for the call
            connection.invoke("SendCallAnswer", toUserId, answer)
                .catch(console.error);
        }

        // Function to send ICE candidates
        function sendIceCandidate(candidate) {
            const toUserId = "user1";  // Target user ID for the call
            connection.invoke("SendIceCandidate", toUserId, candidate)
                .catch(console.error);
        }

        // Function to hang up the call
        function hangUp() {
            callState = "ended";
            const toUserId = "user1";  // Target user ID for the call
            connection.invoke("SendHangUp", toUserId)
                .catch(console.error);
            endCall();
        }

        // End the call and close the peer connection
        function endCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            document.getElementById("remoteAudio").srcObject = null;
            document.getElementById("localAudio").srcObject = null;
            alert("Call ended.");
        }
    </script>
</body>
</html>
