@{
	Layout = "JyotishLayout";

}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

<style>
	.card-body {
		padding-left: 15px !important;
		padding-right: 15px !important;
	}

	.content-container {
		max-width: 800px;
		margin: 20px auto;
		padding: 30px;
		border-radius: 12px;
		background-color: #ffffff;
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
	}

	.header {
		text-align: center;
		margin-bottom: 30px;
	}

		.header h2 {
			font-size: 2.5rem;
			color: #2c3e50;
		}

		.header p {
			font-size: 1.2rem;
			color: #7f8c8d;
		}

	.problem-solution-container {
		margin-top: 20px;
		border: 1px solid #e0e0e0;
		border-radius: 8px;
		padding: 15px;
		background-color: #f9f9f9;
	}

	.section-title {
		font-weight: bold;
		color: #2980b9;
		margin-bottom: 10px;
	}

	.btn-custom {
		background-color: #2980b9;
		color: #fff;
	}

		.btn-custom:hover {
			background-color: #1a5276;
		}

	.form-control {
		border-radius: 5px;
		border: 1px solid #bdc3c7;
	}

		.form-control:focus {
			border-color: #2980b9;
			box-shadow: 0 0 5px rgba(41, 128, 185, 0.5);
		}

	/* Ensure the modal covers the full screen and expands with content */


	.modal-content {
		display: flex;
		flex-direction: column;
	}

	.modal-body {
		flex: 1;
		overflow-y: auto;
	}

	.expandable-content {
		max-height: 50vh; /* Adjust as needed */
		overflow-y: auto;
	}

	/* Optional styling for modal headers and footers */
	.modal-header, .modal-footer {
		background-color: #f5f5f5;
	}

	#problemSection::-webkit-scrollbar {
		width: 4px;
		height: 4px;
	}

	#problemSection::-webkit-scrollbar-thumb {
		background: silver;
		border-radius: 5px;
	}

	#updateproblemSection::-webkit-scrollbar {
		width: 4px;
		height: 4px;
	}

	#updateproblemSection::-webkit-scrollbar-thumb {
		background: silver;
		border-radius: 5px;
	}

	#DataTable_filter {
		display: none !important;
	}
</style>

<div class="container-fluid mt-4">
	<div class="card">
		<div class="d-flex flex-row justify-content-between align-items-center pt-2 px-4">
			<h6 class="text-primary" id="headingtop">Upcomming Appointments</h6>
			<div id="buttonContainer1">
				<button class="btn btn-sm btn-primary" id="upcommingAppointment">upcomming Appointment</button>
				<button class="btn  btn-sm btn-primary" id="todayAppointment">Today Appointment</button>
				<button class="btn  btn-sm btn-success" id="arriveClient">Arrived Client</button>
				<button class="btn  btn-sm btn-warning" id="BookMark"><i role='button' class="fas text-light fa-bookmark"></i></button>
			</div>
		</div>
		<hr />
		<div class="text-center">  <input type="search" name="serachbox" id="searchBox" class="p-2 w-50" placeholder="Search client by name or number" /></div>

		<div class="card-body">
			<div class="table-responsive">
				<table id="DataTable" class="table table-bordered table-striped">
					<thead>
						<tr>
							<th>Sr</th>
							<th>Name</th>
							<th>Date</th>
							<th>Mobile Number</th>
							<th>TimeFrom</th>
							<th>TimeTo</th>
							<th>Problem</th>
							<th>Amount</th>
							<th>Action</th>
						</tr>
					</thead>
					<tbody>
						<!-- Table content will be inserted here dynamically -->
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="updateModalLabel">
					Appointment Detail
				</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<form id="requestForm">

					<input type="hidden" class="form-control" id="Id" readonly>

					<input type="hidden" class="form-control" id="SlotId" readonly>

					<div class="form-group">
						<label for="Name">Name:</label>
						<input type="text" class="form-control" id="Name" readonly>
					</div>

					<div class="form-group mt-3">
						<label for="Problem">Problem:</label>
						<textarea type="text" readonly class="form-control mb-3" id="Problem"></textarea>
					</div>

				</form>
			</div>
		</div>
	</div>
</div>

<!--Add Member Modal -->
<div class="modal fade" id="addmembermodal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Add Another Member</h1>
				<button type="button" class="btn-close" id="closeAddModal" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-sm-12">
						<form id="memberForm">
							<input type="hidden" name="UId" id="UId" />
							<input type="hidden" name="JId" id="JId" />
							<div class="row">
								<div class="col-sm-6">
									Name:
									<input required type="text" name="name" class="form-control" placeholder="Enter Member Name" />
								</div>
								<div class="col-sm-6">
									Gender:
									<select required class="form-select" name="gender">
										<option value="" disabled selected>--Select Gender--</option>
										<option value="male">Male</option>
										<option value="female">Female</option>
									</select>
								</div>
							</div>

							<div class="row my-3">
								<div class="col-sm-6">
									Date of Birth:
									<input required type="date" name="dob" class="form-control" />

								</div>
								<div class="col-sm-6">
									Relationship:
									<input required type="text" name="relation" class="form-control" placeholder="Enter relation with member" />

								</div>
							</div>
							<input type="submit" value="Add" class="btn btn-primary float-end" />
						</form>
					</div>
				</div>
			</div>
			<div class="modal-footer">
			</div>
		</div>
	</div>
</div>

<!--show member Modal -->
<div class="modal fade" id="showmembermodal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Members List</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="text-end mb-3 px-3">
					<i class="fas fa-user-plus text-light Addmember p-4 rounded bg-primary" role='button'></i>
				</div>
				<table class="table table-bordered table-striped">
					<thead>
						<tr>
							<th>Id</th>
							<th>Name</th>
							<th>Date of Birth</th>
							<th>Gender</th>
							<th>Relation</th>
						</tr>
					</thead>
					<tbody id="memberbody">
						<!-- Table content will be inserted here dynamically -->
					</tbody>
				</table>
			</div>
			<div class="modal-footer">
			</div>
		</div>
	</div>
</div>

<!--solution modal-->

<div class="modal fade" id="exampleModalToggle" aria-hidden="true" aria-labelledby="exampleModalToggleLabel" tabindex="-1">
	<div class="modal-dialog modal-dialog-scrollable modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalToggleLabel">Appointment Solution History</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="card-body ">

					<div class="text-end fs-4 mb-3 px-3">
						<span class="btn  edit-appointment btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop"><i title="Add Conclusions" role="button" class="fas  rounded-circle fa-plus"></i> Add</span>
					</div>
					<div class="table-responsive">
						<table id="DataTable2" class="table py-3 table-bordered table-striped">
							<thead>
								<tr>
									<th>Id</th>
									<th>Name</th>
									<th>Date</th>
									<th>Time</th>
									<th>Solution</th>
								</tr>
							</thead>
							<tbody id="appAppointmentModal">
								<!-- Table content will be inserted here dynamically -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="modal-footer">
			</div>
		</div>
	</div>
</div>
<div class="modal fade" id="exampleModalToggle2" aria-hidden="true" aria-labelledby="exampleModalToggleLabel" tabindex="-1">

	<div class="modal-dialog modal-dialog-scrollable modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalToggleLabel2">Conclusions</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-sm-12" id="problemSolutionContent"></div>
				</div>
			</div>
			<div class="modal-footer">
				<button class="btn btn-primary" id="previousBtn">Previous</button>
			</div>
		</div>
	</div>
</div>

<!--Add Attachment-->
<div class="modal fade" id="attachmentModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Add Attachment</h1>
				<button type="button" class="btn-close" id="closeAttachmentModal" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-sm-12">
						<div class="text-end">
							<button class="btn btn-success" id="addAttachmentBtn">Add Attachment</button>
						</div>
						<form id="attachmentForm" class="my-4 " method="post">
							<input type="hidden" name="userId" id="userId" />
							<div class="row justify-content-center align-items-end">
								<div class="col-sm-5">
									<label for="title">Title</label>
									<input type="text" required id="title" name="title" placeholder="Enter Title" class="form-control" />
								</div>
								<div class="col-sm-5">
									<label for="attachment">Attachment</label>
									<input type="file" required id="attachment" name="attachment" class="form-control attachment" />
								</div>
								<div class="col-sm-2">
									<input type="submit" value="Add" class="btn btn-success" />
								</div>
							</div>
						</form>

					</div>
					<div class="col-sm-12 mt-4">
						<div class="row attachmentRecord" id="attachmentRecord">
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
			</div>
		</div>
	</div>
</div>

<!--Add Attachment for Update-->
<div class="modal fade" id="attachmentModal2" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Add Attachment</h1>
				<button type="button" class="btn-close" id="closeAttachmentModal2" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-sm-12">
						<div class="text-end">
							<button class="btn btn-success" id="addAttachmentBtn2">Add Attachment</button>
						</div>
						<form id="attachmentForm2" class="my-4 " method="post">
							<input type="hidden" name="userId" id="userIdup" />
							<input type="hidden" name="appointmentId" id="appointmentIdup" />
							<input type="hidden" name="member" id="memberup" />
							<div class="row justify-content-center align-items-end">
								<div class="col-sm-5">
									<label for="title">Title</label>
									<input type="text" required id="title" name="title" placeholder="Enter Title" class="form-control" />
								</div>
								<div class="col-sm-5">
									<label for="attachment">Attachment</label>
									<input type="file" required id="attachment2" name="attachment" class="form-control " />
								</div>
								<div class="col-sm-2">
									<input type="submit" value="Add" class="btn btn-success" />
								</div>
							</div>
						</form>

					</div>
					<div class="col-sm-12 mt-4">
						<div class="row attachmentRecord" id="attachmentRecord">
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
			</div>
		</div>
	</div>
</div>

<!-- Modal for add solution -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">Add Conclusion</h1>
				<button type="button" class="btn-close" onclick="hideAddProblem()" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="modalForm">
					<input type="hidden" name="appointmentId" id="appointmentId" />
					<input type="hidden" name="userId" id="userId" />
					<!-- Search Box and Results List -->
					<div class="mb-3 d-flex gap-2">
						<select class="form-select" id="selectmember" name="memberId">
							<option disabled>--select member--</option>
						</select>

						<button role="button" type="button" class="btn btn-secondary" id="attachmentModaltrigger"><i class="fas fa-paperclip"></i></button>
					</div>

					<!-- Problem Section with Add More Feature -->
					<div id="problemSection" class="mb-3" style="max-height: 300px; overflow-y: auto;">
						<!-- Added scrolling -->
						<div class="d-flex mb-1 justify-content-between">
							<label class="form-label">Problem</label>
							<button type="button" class="btn btn-outline-success add-more-problem"><i class="fas fa-plus"></i></button>
						</div>
						<div class="input-group mb-2">
							<textarea class="form-control" rows="2" name="problem[]" placeholder="Enter problem"></textarea>
						</div>
					</div>

					<!-- Solution Section with Add More Feature -->
					<div id="solutionSection" class="mb-3" style="max-height: 300px; overflow-y: auto;">
						<!-- Added scrolling -->
						<div class="d-flex mb-1 justify-content-between">

							<label class="form-label">Solution</label>

						</div>
						<textarea class="w-100 summernote " rows="2" id="solution" name="solution" placeholder="Enter solution"></textarea>
					</div>
					<div class="modal-footer">
						<button type="button" id="submitForm" class="btn btn-primary">Add</button>
					</div>
				</form>
			</div>

		</div>
	</div>
</div>




<!-- Update Problem and Solution Modal -->
<div class="modal fade" id="updateProblemSolutionModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="updateProblemSolutionModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="updateProblemSolutionModalLabel">Update Problem and Solution</h5>
				<button type="button" class="btn-close" id="updateModalCloseBtn" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">


				<div class="d-flex justify-content-between">
					<div><div class="section-title">User Name: <span id="modalUserName"></span></div></div>
					<div><div class="section-title">Date: <span id="modalDate"></span></div></div>
					<div><div class="section-title">Time: <span id="modalTime"></span></div></div>
				</div>


				<!-- Hidden input to store AppointmentId -->
				<input type="hidden" id="problemId" name="problemId" />
				<input type="hidden" id="appointmentId" />

				<div class="container-fluid">
					<div class="row">
						<!-- Column for Problems -->
						<!-- Problem Section with Add More Feature -->
						<div id="updateproblemSection" class="my-3 col-sm-12" style="max-height: 300px; overflow-y: auto;">
							<!-- Added scrolling -->
							<div class="d-flex mb-1 justify-content-between">
								<label class="form-label">Problem</label>
								<button type="button" class="btn btn-outline-success add-more-problemup"><i class="fas fa-plus"></i></button>
							</div>
							<div class="input-group mb-2">
								<textarea class="form-control" rows="2" name="problem[]" placeholder="Enter problem"></textarea>
								<div id="addProblemSolutionContainer" class="w-100"></div>
							</div>
						</div>

						<!-- Column for Solutions -->
						<div class="col-md-12">
							<h6>Solution</h6>
							<div class="mb-3"><textarea class="form-control summernote" rows="5" id="updateSolutionText" placeholder="Enter updated solution"></textarea></div>
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-custom" onclick="updateData()">Update</button>
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>



<!-- Button trigger modal -->
<div class="modal fade" id="AddBookmarkModal" tabindex="-1" aria-labelledby="AddBookmarkModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="AddBookmarkModalLabel">Add Bookmark</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body ">
				<input id="AppointmentIdForAddBookmark" hidden />
				<div class="row px-4">
					<div class="col-sm-12 p-2">
						<label for="endDateForAddBookmark"> End Date</label>
						<input class="form-control" type="date" id="endDateForAddBookmark" />
					</div>
					<div class="col-sm-12 p-2">
						<label for="reasonForAddBookmark"> Reason</label>
						<textarea placeholder="Enter Reason" class="form-control" id="reasonForAddBookmark"></textarea>
					</div>
				</div>




			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" id="AddAppointmentBookmark" class="btn btn-primary">Add Bookmark</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal problem-->
<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel2" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel2">Problems</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p id="problemDetails"></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<script>

	$("#attachmentModaltrigger").click(function () {
		$("#staticBackdrop").modal("hide")
		$("#attachmentModal").modal("show")
		getUserAttachment($("#appointmentId").val(), $("#selectmember").val())

	});
	$("#closeAttachmentModal").on("click", function () {
		$("#staticBackdrop").modal("show")

	})

	$("#attachmentForm").hide()

	$("#attachmentForm").submit(function (e) {
		e.preventDefault();
		let formData = new FormData();
		let arrayData = $(this).serializeArray();
		arrayData.push({ name: "jyotishId", value: localStorage.getItem("Id") })
		arrayData.push({ name: "member", value: $("#selectmember").val() })
		arrayData.push({ name: "appointmentId", value: $("#appointmentId").val() })
		arrayData.push({ name: "attachment", value: $("#attachment").get(0).files[0] })
		arrayData.forEach(function (d) {
			formData.append(d.name, d.value);
		})
		debugger
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		var Id = localStorage.getItem('Id');
		$.ajax({
			url: BaseUrl + `Api/Jyotish/AddUserAttachment`,
			method: 'Post',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			processData: false,
			contentType: false,
			data: formData,
			success: function (result) {
				if (result.status == 200) {
					Swal.fire({
						title: "success",
						text: result.message,
						icon: "success",
						didClose: () => {
							getUserAttachment($("#appointmentId").val(), $("#selectmember").val())
							document.getElementById("attachmentForm").reset();
						}

					});
				} else {
					Swal.fire({
						title: "warning",
						text: result.message,
						icon: "warning",
					})
				}
			}, error: function () {
				Swal.fire({
					title: "error",
					text: "some error occured",
					icon: "error",

				});
			}
		})
	})
	$("#attachmentForm2").submit(function (e) {
		e.preventDefault();
		let formData = new FormData();
		let arrayData = $(this).serializeArray();
		arrayData.push({ name: "jyotishId", value: localStorage.getItem("Id") })

		arrayData.push({ name: "attachment", value: $("#attachment2").get(0).files[0] })
		arrayData.forEach(function (d) {
			formData.append(d.name, d.value);
		})
		debugger
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		var Id = localStorage.getItem('Id');
		$.ajax({
			url: BaseUrl + `Api/Jyotish/AddUserAttachment`,
			method: 'Post',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			processData: false,
			contentType: false,
			data: formData,
			success: function (result) {
				if (result.status == 200) {
					Swal.fire({
						title: "success",
						text: result.message,
						icon: "success",
						didClose: () => {
							getUserAttachment($("#appointmentIdup").val(), $("#memberup").val())
							document.getElementById("attachmentForm2").reset();
						}

					});
				} else {
					Swal.fire({
						title: "warning",
						text: result.message,
						icon: "warning",
					})
				}
			}, error: function () {
				Swal.fire({
					title: "error",
					text: "some error occured",
					icon: "error",

				});
			}
		})
	})

	$("#addAttachmentBtn").click(function () {
		$("#attachmentForm").toggle()

	})

	function getFileExtension(filename) {
		const lastDotIndex = filename.lastIndexOf('.');
		return lastDotIndex !== -1 ? filename.slice(lastDotIndex + 1) : ''; // Returns empty string if no extension
	}


	function getUserAttachment(appId, memId) {
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		var Id = localStorage.getItem('Id');
		$.ajax({
			url: BaseUrl + `Api/Jyotish/GetAllUserAttachmentsByAppointmentId`,
			method: 'GET',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			data: { Id: appId, memberId: memId },
			success: function (result) {
				console.log(result)
				$(".attachmentRecord").empty()
				if (result.status == 200) {
					if (result.data != null || result.data.length > 0) {
						result.data.forEach(function (d) {
							let fileExtension = getFileExtension(d.image)
							if (fileExtension == "pdf") {
								$(".attachmentRecord").append(

									`<div class='col-sm-4'>
																		<div class='text-end text-danger'><i data-id='${d.id}' role='button' onClick='removeAttachment(${d.id})' class="fas removeAttachment fa-trash-alt"></i></div>
																<a class=" display-block" href='${BaseUrl}${d.image}' target='_blank'>
																   <div  class='w-100'>
																				<iframe frameborder="0" src="${BaseUrl}${d.image}" height="170" class="w-100  border rounded p-2"/> </iframe>
																	<p class="text-center text-secondary">${d.title}</p>
																</div>
																	</a></div>
															   `
								)
							} else {
								$(".attachmentRecord").append(
									`
															   <div class="col-sm-4">
																						<div class='text-end text-danger'><i data-id='${d.id}'  role='button' class="fas fa-trash-alt" onClick='removeAttachment(${d.id})'></i></div>

																			<a href='${BaseUrl}${d.image}' target='_blank'> <img src="${BaseUrl}${d.image}" class="w-100 border rounded p-2" height="170"/></a>
																<p class="text-center">${d.title}</p>
															</div>
														   `
								)
							}
						})
					} else {
						$(".attachmentRecord").append("<p class='my-3 text-center text-secondary'>no attachment found</p>")
					}
				} else {
					$(".attachmentRecord").append("<p class='my-3 text-center text-secondary'>no attachment found</p>")
				}
				Swal.close()
			}, error: function () {
				Swal.fire({
					title: "error",
					text: "some error occured",
					icon: "error",

				});
			}
		})
	}

	function removeAttachment(id) {
		Swal.fire({
			title: "Are you sure",
			text: "Do you want to Delete?",
			showDenyButton: true,
			showCancelButton: true,
			confirmButtonText: "yes",
			denyButtonText: `no`
		}).then((result) => {
			if (result.isConfirmed) {
				Swal.fire({
					title: "Processing Your Request",
					allowOutsideClick: false,
					didOpen: () => {
						Swal.showLoading();
					}
				})
					;
				$.ajax({
					url: BaseUrl + "api/jyotish/DeleteUserAttachment",
					type: "get",
					headers: {
						'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
					},
					data: { Id: id },
					success: function (res) {
						if (res.status == 200) {
							Swal.fire({
								title: "success",
								text: result.message,
								icon: "success",
								didClose: () => {
									$("#attachmentModaltrigger").trigger("click")
									$("#attachmentModaltrigger2").trigger("click")

								}
							})
						} else {
							Swal.fire({
								title: "error",
								text: result.message,
								icon: "error",
							})
						}

					}, error: function () {
						Swal.fire({
							title: "error",
							text: "some error occured",
							icon: "error",

						});
					}
				})
			}
		})
	}


	function showAttachmentUpdateModal(appId, memId, uId) {
		debugger
		$("#userIdup").val(uId)
		$("#appointmentIdup").val(appId)
		$("#memberup").val(memId)
		getUserAttachment(appId, memId)
		$("#attachmentModal2").modal("show")
		$("#exampleModalToggle2").modal("hide")


	}
	$("#addAttachmentBtn2").click(function () {
		$("#attachmentForm2").toggle()

	})
	$("#closeAttachmentModal2").on("click", function () {
		$("#exampleModalToggle2").modal("show")

	})

	$("#updateModalCloseBtn").click(function () {
		$("#exampleModalToggle2").modal("show")

	})

	// Fetch and display all appointments on page load
	let appointmentslots = []
	let upcommingAppointment = [];
	let newAppointmentArray = [];
	let checkClickEvent = "upcomming";

	function fetchData() {
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		var Id = localStorage.getItem('Id');
		$.ajax({
			url: BaseUrl + `Api/Jyotish/GetAllUpcommingAppointment`,
			method: 'GET',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			data: { jyotishId: localStorage.getItem("Id") },
			success: function (result) {
				console.log(result)
				appointmentslots = result.data;
				newAppointmentArray = result.data;
				showAppointmentSlots(result.data, checkClickEvent);
				Swal.close()
			},
			error: function (errormessage) {
				console.error('Error fetching data:', errormessage.responseText);
			}
		})
	}

	function fetchProblemDate(uid, appid) {
		userId = uid
		debugger
		$(".edit-appointment").attr("onclick", `setMembers(${uid},${appid})`)
		$(".edit-appointment").attr("data-id", appid)

		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		var Id = localStorage.getItem('Id');
		debugger
		$.ajax({
			url: BaseUrl + `api/Jyotish/GetAllProblemSolutionByUser`,
			type: 'GET',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`

			},
			data: { JyotishId: Id, UId: uid },
			success: function (result) {
				console.log(result)
				$("#exampleModalToggle").modal("show")
				Swal.close();
				var counterForId = 1;
				let htmls = '';
				$.each(result.data, function (key, item) {
					let [year, month, day] = item.date.split('T')[0].split('-')
					htmls += '<tr>';
					htmls += `<td class="text-center">${counterForId}</td>`;
					htmls += `<td class="text-center">${item.userName}</td>`;

					htmls += `<td class="text-center">${day}-${month}-${year}</td>`;
					htmls += `<td class="text-center">${item.time}</td>`;
					htmls += `<td class="text-center"> <a onClick='GetProblemSolutionDetail(${item.appointmentId})'" class="btn btn-success"> View </a></td>`

					htmls += '</tr>';
					counterForId++;
				});
				$('#appAppointmentModal').html(htmls);
				$('#DataTable2').DataTable();
			},
			error: function (errormessage) {
				console.error('Error fetching data:', errormessage.responseText);
			}
		});
	}

	function GetProblemSolutionDetail(id) {
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		$.ajax({
			url: `${BaseUrl}Api/Jyotish/GetProblemSolutionDetail`,
			method: "GET",
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`
			},
			data: { appointmentId: id },
			success: function (response) {
				Swal.close()
				console.log(response)
				if (response.status === 200) {
					const data = response.data;
					$("#exampleModalToggle").modal("hide")
					$("#exampleModalToggle2").modal("show")
					$('#problemSolutionContent').empty()
					if (data.length > 0) {
						data.forEach(function (d) {
							const content = `
																   <div class="container my-3 text-end">
																   <button role='button' class='btn btn-info' onClick='printReceipt(${JSON.stringify(d)})' type='button'><i class="fas fa-print"></i></button>
																	   <button role="button" type="button" class="btn btn-secondary attachmentModaltriggerforUpdate" onClick='showAttachmentUpdateModal(${d.appointmentId},${d.memberId},${d.uId})' ><i class="fas fa-paperclip"></i></button>
																<a class="btn btn-success" data-bs-toggle="modal" data-bs-target="#updateProblemSolutionModal"
																   onclick='populateUpdateModal(${JSON.stringify(d)})'>Update</a>
															</div>
															<div class="problem-solution-container">
																<div class="d-flex justify-content-between">
																						<div><div class="section-title">${d.memberName != null ? "Member Name" : "User Name"}:</div><p>${d.memberName != null ? d.memberName : d.userName}</p></div>
																	<div><div class="section-title">Date:</div><p>${d.appointmentDate}</p></div>
																		<div><div class="section-title">Time:</div><p>${d.appointmentTime}</p></div>
																</div>
																<div class="section-title">Problems:</div>
																<ol>${d.problems.map(problem => `<li>${problem}</li>`).join('')}</ol>
																<div class="section-title">Solutions:</div>
																<div>${d.solution}</div>
															</div>
														`;
							$('#problemSolutionContent').append(content);
						})
					} else {
						$('#problemSolutionContent').html('<p>No data available.</p>');
					}
				} else {
					$('#problemSolutionContent').html('<p>No data available.</p>');
				}
			},
			error: function () {
				$('#problemSolutionContent').html('<p>Error loading data.</p>');
			}
		});
	}


	function updateData() {
		const Id = $('#problemId').val();
		const appointmentId = $('#appointmentId').val();
		const problems = Array.from($('textarea[name="problem[]"]')).map(input => input.value).filter(d => d != "");
		const solutions = $("#updateSolutionText").val();

		let formData = new FormData()
		formData.append("Id", Id)
		formData.append("Problem", problems)
		formData.append("Solution", solutions)

		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		debugger
		$.ajax({
			url: `${BaseUrl}Api/Jyotish/UpdateProblemSolution`,
			type: 'POST',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			processData: false,
			contentType: false,
			data: formData,
			success: function (response) {
				if (response.status === 200) {
					Swal.fire({
						title: "success",
						text: "Record Updated Successfully",
						icon: "success",
						didClose: () => {
							GetProblemSolutionDetail(appointmentId)
							$('#updateProblemSolutionModal').modal('hide');
						}

					});
				} else {
					Swal.fire({
						title: "error",
						text: response.message,
						icon: "error",

					});
				}
			},
			error: function (err) {
				console.log(err)
				Swal.fire({
					title: "error",
					text: "some error occured",
					icon: "error",

				});
			}
		});
	}

	$("#exampleModalToggle").on("show.bs.modal", function () {
		fetchProblemDate()

	})

	$("#previousBtn").click(function () {
		$("#exampleModalToggle2").modal("hide")
		$("#exampleModalToggle").modal("show")

	})



	function populateUpdateModal(data) {
		$('#exampleModalToggle2').modal('hide');

		console.log(data, "mem")
		$("#modalUserName").text(data.userName)
		$("#modalDate").text(data.appointmentDate)
		$("#modalTime").text(data.appointmentTime)
		$("#problemId").val(data.problemId)
		$("#appointmentId").val(data.appointmentId)
		$('#updateSolutionText').summernote('code', data.solution);
		let problemhtml = "";
		data.problems.forEach(function (d) {
			problemhtml += `
													<div class="w-100 my-2">
													<div class='d-flex justify-content-end mb-1 w-100'>
																<button type="button" class="btn btn-outline-danger remove-problem"><i class="fas fa-trash-alt"></i></button>
														</div>
															<textarea class="form-control" rows="2" name="problem[]" placeholder="Enter problem">${d}</textarea>
													</div>
												`

		})
		$('#addProblemSolutionContainer').html(problemhtml)



	}

	$('.add-more-problemup').click(function () {
		$('#addProblemSolutionContainer').append(`
													<div class="w-100 my-2">
													<div class='d-flex justify-content-end mb-1 w-100'>
																<button type="button" class="btn btn-outline-danger remove-problem"><i class="fas fa-trash-alt"></i></button>
														</div>
															<textarea class="form-control" rows="2" name="problem[]" placeholder="Enter problem"></textarea>
													</div>
												`);
	});


	$(document).on('click', '.remove-problem', function () {
		$(this).parent().parent().remove();
	});


	function reverseDate(dateString) {
		// Check if the date string is in the correct format (DD-MM-YYYY)
		const datePattern = /^\d{2}-\d{2}-\d{4}$/;
		if (datePattern.test(dateString)) {
			return dateString
		}
		debugger
		// Split the date into its components
		const parts = dateString.split('-');
		// Reverse the order of the components
		const reversedParts = [parts[2], parts[1], parts[0]]; // YYYY-MM-DD format
		// Join the parts back into a string
		return reversedParts.join('-');
	}

	function showAppointmentSlots(appointment, clickBy) {
		checkClickEvent = clickBy

		if (appointment.length > 0) {
			let htmls = '';
			$.each(appointment, function (key, item) {
				htmls += '<tr>';
				htmls += `<td class="text-center">${key + 1}</td>`;
				htmls += `<td class="text-center">${item.userName}</td>`;
				htmls += `<td class="text-center">${item.appoinDate}</td>`;
				htmls += `<td class="text-center">${item.userMobile}</td>`;
				htmls += `<td class="text-center">${item.appoinTimeFrom}</td>`;
				htmls += `<td class="text-center">${item.appoinTimeTo}</td>`;
				htmls += `<td class="text-center"><i class="fas fa-eye fs-5" role='button' onclick='setProblemIntoModal("${item.problem}")'></i></td>`;
				htmls += `<td class="text-center">${item.amount || 'N/A'}</td>`;
				htmls += `<td class="text-center">

																			<i class="fas ${item.arriveStatus == 0 || item.arriveStatus == null ? "fs-4 fa-user-slash text-secondary" : ""
					} arrivedClientBtn" ${item.arriveStatus == 0 || item.arriveStatus == null ? `onClick = 'updateArrivedClient(${item.id})' title="click here if user arrived" role='button'` : ""
					} ></i >
								<span class="d-flex gap-3 ${item.arriveStatus == 0 || item.arriveStatus == null ? 'd-none' : ''}">
											<i class="fas fa-users text-info fs-4" onClick='getClientMember(${item.uId})'  role='button' role='show member'></i>

																								  <a role='button' onClick='fetchProblemDate(${item.uId},${item.id})'><i class="fas fs-4 fa-list-alt"></i></a>
																									  <i role='button'  onClick='BookMark(${item.id},${item.bookMark})' class="${item.bookMark == 1 ? "fas" : "far"} fs-4 fa-bookmark"></i></span>
																		  </td>`;
				htmls += '</tr>';
			});
			$('#DataTable tbody').html(htmls);
			$('#DataTable').DataTable();
		} else {
			$('#DataTable tbody').html("<p class='text-center'>no record found</p>");
		}
	}

	function setProblemIntoModal(problem) {
		$("#problemDetails").text(problem)
		$("#exampleModal2").modal("show")
	}

	async function BookMark(id, bookmark) {
		debugger
		var Id = localStorage.getItem('Id');

		if (bookmark == 0) {

			$('#AppointmentIdForAddBookmark').val(id);
			const modal = new bootstrap.Modal(document.getElementById('AddBookmarkModal'));
			modal.show();
		}
		else {
		let bookMarkDetail=await getBookmark(id)
			console.log(bookMarkDetail);
			let [year,month,day] = bookMarkDetail.data.endDate != null ? bookMarkDetail.data.endDate.split("-") : "";
			Swal.fire({
				title:bookMarkDetail.data.reason,
				text:  bookMarkDetail.data.endDate!=null?`End Date : ${day}-${month}-${year}`:"",
				showCancelButton: true,
				confirmButtonText: 'Remove',
				cancelButtonText: 'close',
				showConfirmButton: true,
				reverseButtons: true
			}).then((result) => {
				if (result.isConfirmed) {
					$.ajax({
						url: BaseUrl + `api/Jyotish/DeleteAppointmentBookmark?Id=${id}`,
						type: 'DELETE',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem("Token2")}`

						},
						success: function (response) {
							if (response.status == 200) {
								fetchData()
								Swal.fire({
									title: "Successful",
									text: "Bookmark Removed Successfully",
									icon: "success",
									didClose: () => {
										debugger
										if (checkClickEvent == "today") {
											$("#todayAppointment").trigger("click")
										} else if (checkClickEvent == "upcomming") {
											$("#upcommingAppointment").trigger("click")
										} else if (checkClickEvent == "filter") {
											const searchTerm = $("#searchBox").val().toLowerCase();
											if (searchTerm != "") {
												if (searchTerm.length >= 1) {
													debugger
													const filteredResults = newAppointmentArray.filter(item => item.userName.toLowerCase().includes(searchTerm) | item.userMobile.includes(searchTerm) | item.userEmail.includes(searchTerm))
													showAppointmentSlots(filteredResults, "filter");
												} else {
													$('#resultsList').empty();  // Clear list if search term is empty
												}
											} else {
												showAppointmentSlots(newAppointmentArray, "filter");

											}
										} else if (checkClickEvent == "bookMark") {
											$("#BookMark").trigger("click")

										} else {
											showAppointmentSlots(newAppointmentArray, "filter");

										}

									}
								});



							}
						},
						error: function () {
							Swal.fire({
								title: "error",
								text: "some error occured",
								icon: "error",

							});
						}
					});

				}

			});
		}
	}
	function getBookmark(id) {
		return $.ajax({
			url: BaseUrl + `api/Jyotish/GetAppointmentBookmark?Id=${id}`,
			type: 'get',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`

			},
			data: { Id: id },
			success: function (res) {
				console.log(res)
			}
		})
	}



	$('#AddAppointmentBookmark').on('click', function () {

		// Get values from input fields
		var AppointmentId = $('#AppointmentIdForAddBookmark').val();
		var EndDate = $('#endDateForAddBookmark').val();
		var Reason = $('#reasonForAddBookmark').val();

		// Validate the input fields
		if (!AppointmentId || !Reason) {
			Swal.fire({
				title: "Error",
				text: "Please fill in all fields.",
				icon: "error",
			});
			return; // Prevent further execution if validation fails
		}

		// Get JyotishId from localStorage
		var JyotishId = localStorage.getItem('Id');

		// Create data object for the API request
		var DataContainer = {
			AppointmentId: AppointmentId,
			EndDate: EndDate != "" ? EndDate : null,
			Reason: Reason,
			JyotishId: JyotishId
		}

		// Show loading spinner
		Swal.fire({
			title: "Processing...",
			text: "Please wait while we process your request.",
			didOpen: () => {
				Swal.showLoading();
			}
		});


		$.ajax({
			url: BaseUrl + 'Api/Jyotish/AddAppointmentBookmark',
			type: 'POST',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			data: JSON.stringify(DataContainer),
			contentType: 'application/json',
			success: function (response) {

				Swal.close();


				if (response.status == 200) {
					Swal.fire({
						title: "Successful",
						text: "Bookmark Added Successfully",
						icon: "success",
						didClose: () => {
							location.reload();
						}
					});

				} else {

					Swal.fire({
						title: "Error",
						text: "An unexpected error occurred. Please try again.",
						icon: "error",
					});
				}
			},
			error: function (xhr, status, error) {

				Swal.close();


				Swal.fire({
					title: "Error",
					text: `Error: ${xhr.status} - ${xhr.responseText || error}`,
					icon: "error",
				});
			}
		});

	});


	$("#todayAppointment").click(function () {

		let upcommingAppointment = appointmentslots.filter((d) => d.appoinDate >= d.currentDate);
		let todayAppointment = upcommingAppointment.filter((d) => d.appoinDate == d.currentDate)
		newAppointmentArray = todayAppointment
		showAppointmentSlots(todayAppointment, "today")
		$("#headingtop").text("Taday Appointments")
	})


	$("#upcommingAppointment").click(function () {

		newAppointmentArray = appointmentslots;

		showAppointmentSlots(appointmentslots, "upcomming")
		$("#headingtop").text("Upcomming Appointments")

	})
	$("#arriveClient").click(function () {

		let upcommingAppointment = appointmentslots.filter((d) => d.appoinDate >= d.currentDate);

		let approved = upcommingAppointment.filter((d) => d.arriveStatus == 1);
		newAppointmentArray = approved

		showAppointmentSlots(approved, "arrived")
		$("#headingtop").text("Arrived Clients")

	})
	$("#BookMark").click(function () {

		let upcommingAppointment = appointmentslots.filter((d) => d.appoinDate >= d.currentDate);

		let bookMark = upcommingAppointment.filter((d) => d.bookMark == 1);
		newAppointmentArray = bookMark

		showAppointmentSlots(bookMark, "bookMark")
		$("#headingtop").text("BookMarked")

	})

	$('#searchBox').on('input', function () {
		const searchTerm = $(this).val().toLowerCase();
		if (searchTerm != "") {
			if (searchTerm.length >= 1) {
				debugger
				const filteredResults = newAppointmentArray.filter(item => item.userName.toLowerCase().includes(searchTerm) | item.userMobile.includes(searchTerm) | item.userEmail.includes(searchTerm))
				showAppointmentSlots(filteredResults, "filter");
			} else {
				$('#resultsList').empty();  // Clear list if search term is empty
			}
		} else {
			showAppointmentSlots(newAppointmentArray, "filter");

		}
	});

	function updateArrivedClient(id) {
		Swal.fire({
			title: 'Are you sure?',
			text: 'Client Are Arrived?',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No, cancel',
			reverseButtons: true
		}).then((result) => {
			if (result.isConfirmed) {
				let appointmentId = id
				Swal.fire({
					title: "Processing Your Request",
					allowOutsideClick: false,
					didOpen: () => {
						Swal.showLoading();
					}
				})
				var Id = localStorage.getItem('Id');
				$.ajax({
					url: BaseUrl + `api/Jyotish/updateArrivedClient`,
					type: 'GET',
					data: { appointmentId: appointmentId, jyotishId: Id },
					headers: {
						'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
						'Content-Type': 'application/json'
					},
					success: function (result) {
						if (result.status == 200) {
							fetchData()
							Swal.fire({
								title: "Success",
								text: result.message,
								icon: "success",
								didClose: () => {

									if (checkClickEvent == "today") {
										$("#todayAppointment").trigger("click")
									} else if (checkClickEvent == "upcomming") {
										$("#upcommingAppointment").trigger("click")
									} else if (checkClickEvent == "filter") {
										const searchTerm = $("#searchBox").val().toLowerCase();
										if (searchTerm != "") {
											if (searchTerm.length >= 1) {
												debugger
												const filteredResults = newAppointmentArray.filter(item => item.userName.toLowerCase().includes(searchTerm) | item.userMobile.includes(searchTerm) | item.userEmail.includes(searchTerm))
												showAppointmentSlots(filteredResults, "filter");
											} else {
												$('#resultsList').empty();  // Clear list if search term is empty
											}
										} else {
											showAppointmentSlots(newAppointmentArray, "filter");

										}
									}

								}
							})

						} else {
							Swal.fire({
								title: "error",
								text: result.message,
								icon: "error",

							});
						}
					}, error: function () {
						Swal.fire({
							title: "error",
							text: "some error occured",
							icon: "error",

						});
					}
				})
			}
		})
	}

	function setMembers(UId, appId) {
		debugger
		$("#selectmember").empty()
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		var Id = localStorage.getItem('Id');

		$.ajax({
			url: BaseUrl + `api/Jyotish/GetClientMembers`,
			type: 'GET',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`
			},
			data: { Id: UId, jyotishId: Id },
			success: function (result) {
				if (result.status == 200) {
					$("#userId").val(UId)
					$("#appointmentId").val(appId)
					$("#selectmember").append(`
																	 <option value='0'>${result.data.userName} </option>
																`)
					if (result.data.memberList.length > 0) {
						result.data.memberList.forEach(function (item, i) {

							$("#selectmember").append(`
															 <option value='${item.id}'>${item.name} - ${item.relation}</option>
															`)

						})
					}
				}
				Swal.close()
			}, error: function () {
				Swal.fire({
					title: "error",
					text: "some error occured",
					icon: "error",

				});
			}
		})
	}

	function hideAddProblem() {
		$("#exampleModalToggle").modal("show")
	}
	let userId;

	$(document).ready(function () {
		// Fetch and populate modal form with appointment data
		$(document).on('click', '.edit-appointment', function () {
			$("#exampleModalToggle").modal("hide")

		});

		$('#updateButton').on('click', async function () {
			const formData = {
				id: parseInt($('#Id').val(), 10),

				email: $('#Email').val(),

				jyotishId: localStorage.getItem('Id'),
				slotId: parseInt($('#SlotId').val(), 10),

				problem: $('#Problem').val(),

			};

			console.log('Form Data:', formData); // Check the form data

			try {
				const response = await fetch(BaseUrl + 'api/Jyotish/UpdateAppointment', {
					method: 'POST', // Change this to 'PUT' if your API expects a PUT request for updates
					headers: {
						'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(formData) // Stringify the formData object
				});

				if (response.ok) {
					alert('Appointment updated successfully!');
					$('#updateModal').modal('hide');
					location.reload();// Refresh the table data after update
				} else {
					const error = await response.json();
					alert('Error updating appointment: ' + error.message);
				}
			} catch (error) {
				console.error('Error updating appointment:', error);
			}
		});

		fetchData(); // Initial data fetch
	});

	$(".Addmember").click(function () {
		let id = $(this).attr("data-id")
		$("#UId").val(id)
		$("#JId").val(localStorage.getItem("Id"))
		$("#addmembermodal").modal("show")
		$("#showmembermodal").modal("hide")
	})

	$("#closeAddModal").click(function () {
		$("#showmembermodal").modal("show")

	})

	$('.add-more-problem').click(function () {
		$('#problemSection').append(`
													<div class="w-100 my-2">
													<div class='d-flex justify-content-end mb-1 w-100'>
																<button type="button" class="btn btn-outline-danger remove-problem"><i class="fas fa-trash-alt"></i></button>
														</div>
															<textarea class="form-control" rows="2" name="problem[]" placeholder="Enter problem"></textarea>
													</div>
												`);
	});


	$(document).on('click', '.remove-problem', function () {
		$(this).parent().parent().remove();
	});



	$("#memberForm").submit(function (e) {
		e.preventDefault()
		Swal.fire({
			title: 'Are you sure?',
			text: 'Do you really want to add?',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: 'Yes',
			cancelButtonText: 'No, cancel',
			reverseButtons: true
		}).then((result) => {
			if (result.isConfirmed) {

				let memberObject = {}
				let arrayData = $(this).serializeArray();
				arrayData.forEach(function (d) {
					memberObject[d.name] = d.value;
				})
				debugger

				Swal.fire({
					title: "Processing Your Request",
					allowOutsideClick: false,
					didOpen: () => {
						Swal.showLoading();
					}
				})
				var Id = localStorage.getItem('Id');
				$.ajax({
					url: BaseUrl + `api/Jyotish/AddClientMembers`,
					type: 'POST',
					headers: {
						'Authorization': `Bearer ${localStorage.getItem("Token2")}`
					},

					contentType: "application/json",
					data: JSON.stringify(memberObject),
					success: function (result) {
						if (result.status == 200) {
							Swal.fire({
								title: "Success",
								text: result.message,
								icon: "success",
								didClose: () => {
									$("#addmembermodal").modal("hide")
									$("#showmembermodal").modal("show")
									document.getElementById("memberForm").reset()
									getClientMember(userId)
								}
							});
						} else {
							Swal.fire({
								title: "error",
								text: result.message,
								icon: "error",

							});
						}
					}, error: function () {
						Swal.fire({
							title: "error",
							text: "some error occured",
							icon: "error",

						});
					}
				})
			}
		})
	})

	function getClientMember(UId) {
		userId = UId;
		$("#memberbody").empty()
		$(".Addmember").attr("data-id", UId)
		let jyotishId = localStorage.getItem("Id")
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		$("#showmembermodal").modal("show")
		var Id = localStorage.getItem('Id');

		$.ajax({
			url: BaseUrl + `api/Jyotish/GetClientMembers`,
			type: 'GET',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`
			},
			data: { Id: UId, jyotishId: jyotishId },
			success: function (result) {
				console.log(result)
				if (result.status == 200) {
					if (result.data.memberList.length > 0) {
						result.data.memberList.forEach(function (d, i) {
							$("#memberbody").append(`
														<tr class='text-center'>
														<td>${i + 1}</td>
														<td>${d.name}</td>
														<td>${d.dob}</td>
														<td>${d.gender}</td>
														<td>${d.relation}</td>
														</tr>
														`)
						})
					} else {
						$("#memberbody").append(`
														  <tr>
															<td></td>
															<td></td>
															<td>No record found</td>
															<td></td>
															<td></td>
															</tr>
													`)
					}
				}
				Swal.close()
			}, error: function () {
				Swal.fire({
					title: "error",
					text: "some error occured",
					icon: "error",

				});
			}
		})
	}


	function printReceipt(d) {
		let data = d
		console.log(data)
		let printWindow = window.open('', '_blank', 'width=600,height=400');

		// Prepare the HTML content for printing
		let printContent = `<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap-grid.min.css" integrity="sha512-JQksK36WdRekVrvdxNyV3B0Q1huqbTkIQNbz1dlcFVgNynEMRl0F8OSqOGdVppLUDIvsOejhr/W5L3G/b3J+8w==" crossorigin="anonymous" referrerpolicy="no-referrer" />  <div class="problem-solution-container">
																<div class="d-flex justify-content-between">
																						<div><div class="section-title">${data.memberName != null ? "Member Name" : "User Name"}:</div><p>${data.memberName != null ? data.memberName : data.userName}</p></div>
															  <div><div class="section-title">Date:</div><p>${data.appointmentDate}</p></div>
															  <div><div class="section-title">Time:</div><p>${data.appointmentTime}</p></div>
																</div>
																<div class="section-title">Problems:</div>
																<ol>${data.problems.map(problem => `<li>${problem}</li>`).join('')}</ol>
																<div class="section-title">Solutions:</div>
																<div>${data.solution}</div>
															</div>`

		// Write the HTML content to the new window
		printWindow.document.write(printContent);
		printWindow.document.close();

		// Wait for the content to load and then print
		printWindow.onload = function () {
			printWindow.print();

			setTimeout(function () {
				printWindow.close(); // Close the window after a short delay
			}, 20000);
		}
	}
</script>
<script>

	$('#submitForm').click(function () {
		// Get selected item ID from the active list item
		Swal.fire({
			title: "Processing Your Request",
			allowOutsideClick: false,
			didOpen: () => {
				Swal.showLoading();
			}
		})
		let formData = {
			AppointmentId: $("#appointmentId").val(),
			memberId: $("#selectmember").val(),
			problem: $('textarea[name="problem[]"]').map(function () { return $(this).val(); }).get(),
			solution: $("#solution").val()
		};
		debugger
		$.ajax({
			url: BaseUrl + 'Api/Jyotish/AddProblemSolution',
			method: 'POST',
			headers: {
				'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
			},
			contentType: 'application/json',
			data: JSON.stringify(formData),
			success: function (response) {
				debugger
				if (response.status == 200) {
					Swal.fire({
						title: 'Success',
						icon: "success",
						text: response.message,
						didClose: () => {

							$('#staticBackdrop').modal('hide');
							document.getElementById("modalForm").reset()
							$("#solution").summernote('reset');
							$("#exampleModalToggle").modal("show")
							debugger
							fetchProblemDate(userId, $("#appointmentId").val())
						}
					});
				} else {
					Swal.fire({
						title: 'error',
						icon: "error",
						text: response.message
					});
				}
			},
			error: function (error) {
				Swal.fire({
					title: 'error occured',
					icon: "error",
					text: "Some error occured"
				});
			}
		});
	});

	$(document).ready(function(){
		let curretDate = new Date();
		curretDate.setDate(curretDate.getDate() + 1);
		$("#endDateForAddBookmark").attr("min", curretDate.toISOString().split('T')[0])
	})

</script>




