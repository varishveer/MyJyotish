
@{
    Layout = "JyotishLayout";

}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.0/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap" rel="stylesheet">
<script src="https://unpkg.com/@@phosphor-icons/web"></script>
<style>
    body {
        margin: 0;
        font-family: "Heebo", sans-serif;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #757575;
        background-color: #F3F6F9;
        -webkit-text-size-adjust: 100%;
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    }
    .main-container {
        overflow: hidden;
        padding: 15px;
        border-radius: 0px 10px 10px 0px;
        box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.3);
    }


    .left-part img {
        max-width: 100%;
        height: auto;
        border-radius: 10px 0px 0px 10px;
    }

    .form-select {
        font-size: 13px;
    }

    .right-part form input, .right-part form button {
        font-size: 13px;
    }

    .right-part button {
        background-color: #138496;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .right-part button:hover {
            background-color: #117a88;
        }

    hr:not([size]) {
        height: 0.02125rem !important;
    }

    .input-container input[type="date"],
    .input-container input[type="text"] {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        background: transparent;
        border: none;
        outline: none;
        box-shadow: none;
    }

    /* INPUT CONTAINER  */
    .input-container {
        display: flex;
        flex-direction: column;
        width: auto;
        height: auto;
        min-width: 217px;
        height: 60px;
        padding: 5px 10px 10px 10px;
        background: #fff;
        border-radius: 8px;
        filter: drop-shadow(0px 0px 3px #000);
        -webkit-filter: drop-shadow(0px 0px 3px #000);
        overflow: hidden;
        cursor: pointer;
    }

        .input-container:hover,
        .input-container:focus,
        .input-container:active {
            transform: scale(1.1);
            -webkit-transform: scale(1.1);
        }

        .input-container label {
            position: relative;
            width: 100%;
            font-family: "Segoe UI";
            font-weight: 600;
            font-size: 11px;
            letter-spacing: 0.1em;
            line-height: 20px;
            color: #09f;
            margin-left: 2px;
            text-transform: uppercase;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .input-container input {
            position: relative;
            align-items: center;
            width: auto;
            height: auto;
            font-family: "Lekton", Arial, sans-serif;
            font-weight: 600;
            font-size: 22px;
            letter-spacing: 0.05em;
            line-height: 21px;
            text-transform: uppercase;
            margin-left: 0px;
        }

    /* BUTTON CONTAINER */
    .button-container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: auto;
        min-width: 197px;
        height: 65px;
        padding: 1px;
        padding-bottom: 2px;
        background: #09f;
        border-radius: 8px;
        filter: drop-shadow(0px 0px 3px #000);
        -webkit-filter: drop-shadow(0px 0px 3px #000);
        overflow: hidden;
        cursor: pointer;
    }

        .button-container:hover,
        .button-container:focus {
            background: #09f;
            filter: drop-shadow(0px 0px 3px #09f);
            -webkit-filter: drop-shadow(0px 0px 3px #09f);
        }
        /* -- button -- */
        .button-container .button {
            position: relative;
            width: 100%;
            min-height: 63px;
            height: auto;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 7px;
            background: #fff;
            color: #000;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 700;
        }

        .button-container:hover .button:hover {
            background: #000;
            color: #fff;
        }

        .button-container:hover .button:active {
            background: #000;
            color: #fff;
            background: #09f;
            filter: drop-shadow(0px 0px 3px #09f);
            -webkit-filter: drop-shadow(0px 0px 3px #09f);
        }
        /* -- button ok -- */
        .button-container .button.ok {
            background: #131313;
            color: #fff;
        }

        .button-container:hover .button.ok:hover {
            background: #131313;
            color: #09f;
            text-shadow: 0px 0px 10px #09f;
            -webkit-text-shadow: 0px 0px 10px #09f;
        }

        .button-container:hover .button.ok:active {
            color: #fff;
            background: #09f;
            filter: drop-shadow(0px 0px 3px #000);
            -webkit-filter: drop-shadow(0px 0px 3px #000);
        }

    /* RESERVATION BOX */
    .reservation-box {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
        height: auto;
        padding: 20px;
        border-radius: 7px;
        background-color: rgba(255,255,255,1);
    }

        .reservation-box .static {
            position: relative;
            display: flex;
            align-items: center;
            float: left;
            width: auto;
            margin-right: 20px;
        }

        .reservation-box .flex {
            position: relative;
            display: flex;
            float: left;
            flex-direction: table;
            align-items: center;
            gap: 20px;
            width: auto;
        }

        .reservation-box .top {
            display: flex;
            flex-direction: table;
        }

        .reservation-box .bottom {
            position: relative;
            width: 100%;
            text-align: right;
        }

        .reservation-box .info {
            width: auto;
            color: #000;
            font-weight: 500;
            text-decoration: none;
            text-align: right;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }

            .reservation-box .info:hover,
            .reservation-box .info:focus,
            .reservation-box .info:active {
                color: #000;
                border-bottom: 2px solid #09f;
            }

        /* RESERVATION BOX SMALL */
        .reservation-box.small, .reservation-box.small .flex {
            flex-direction: column;
        }

            .reservation-box.small .top {
                display: flex;
                flex-direction: column;
                gap: 20px;
            }

            .reservation-box.small .static {
                margin-right: 0px;
            }

            .reservation-box.small .bottom {
                text-align: center;
            }

            .reservation-box.small .button-container {
                min-width: 217px;
            }

    .skipDays{
        min-width:217px !important;
    }
</style>

<div class="container d-flex justify-content-center align-items-center min-vh-90 mt-4">
    <div class="main-container row w-100 rounded-3">
        <!-- Form Section -->
        <div class="col-lg-12 col-md-12 p-2 bg-white right-part">
            <h5 class="mb-3 text-primary fw-bold">Add Appointment Slot</h5>
            <hr />
            <form>
               <div class="row">
                   <div class="col-sm-12">
                       <div class="row">
                           <div class="col-sm-12">
                               Appointment Date
                                <div class="reservation-box">
                                    <div class="top d-flex flex-wrap">
                                        <div class="static">
                                            <div class="input-container" id="date-picker-container">
                                                <label for="date-from">Start</label>
                                                <input type="date" id="date-checkin" class="date-field" name"date-from">
                                            </div>
                                        </div>
                                        <div class="static">
                                            <div class="input-container" id="date-picker-container">
                                                <label for="date-from">End</label>
                                                <input type="date" id="date-checkout" class="date-field" name"">
                                            </div>
                                            
                                            
                                        </div>
                                        <div class="static">
                                            <div class="input-container" id="date-picker-container">
                                                <label for="date-from" class="m-0">Appointment Time</label>
                                                <select class="date-field border-0">
                                                    <option value="" disabled>--Select Appointment Time--</option>
                                                    <option value="15" selected>15 min</option>
                                                    <option value="30">30 min</option>
                                                    <option value="60">60 min</option>
                                                </select>
                                            </div>
                                        </div>
                                       
                                        <div class="static mt-4">
                                            <div class="input-container" id="date-picker-container">
                                                <label for="date-from">Skip Date (Optional)</label>
                                                <input type="date" id="date-checkout" class="date-field" name"">
                                            </div>

                                        </div>
                                        <div class="mt-4 static skipDays d-block">
                                            <p class="m-0 text-primary">Skip Days (Optional)</p>
                                            <input type="checkbox" name="saturday" class="form-check-inline" value="1" />Satuday &nbsp;
                                            <input type="checkbox" name="sunday" class="form-check-inline" value="2" />Sunday
                                        </div>
                                        <div class="button-container  mt-4">
                                            <span class="button ok">Create</span>
                                        </div> 
                                    </div>
                                    <div class="bottom">
                                    </div>
                                </div>

                               
                           </div>
                       </div>
                   </div>
               </div>                    

            </form>
        </div>
    </div>
</div>



<div class="container mt-4">
    <div class="card">
        <div class="d-flex flex-row justify-content-between align-items-center pt-2 px-4">
            <h5 class="text-primary">Appointment Slot List</h5>
        </div>
        <hr />

        <div class="card-body ">
            <div class="table-responsive">
                <table id="DataTable" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Date</th>
                            <th>Time Duration</th>
                            <th>Time From</th>
                            <th>Time To</th>
                            <th>Status</th>
                           <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dynamic Data goes here -->

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<!-- The same form structure remains here, we'll focus on the script -->

<script>
    $(document).ready(function () {
        // Add New Slot
        $("#btnsubmit").on('click', function (e) {
            e.preventDefault();

            // Collect form data
            const date = $("#date").val();
            const timeFrom = $("#timeFrom").val(); // Get time in HH:MM format
            const timeTo = $("#timeTo").val(); // Get time in HH:MM format
            const timeDuration = $("#timeDuration").val();
            const jyotishId = localStorage.getItem('Id');

            // Validate the form
            if (!date || !timeFrom || !timeTo || !timeDuration) {
                Swal.fire({
                    title: 'Error!',
                    text: 'All fields are required.',
                    icon: 'error',
                    confirmButtonText: 'Close'
                });
                return;
            }

            // Convert time to HH:MM:SS format
            const timeFromFormatted = timeFrom + ':00'; // Append seconds
            const timeToFormatted = timeTo + ':00'; // Append seconds

            // Debug: Log the values before the AJAX call
            console.log("Submitting:", { date, timeFromFormatted, timeToFormatted, timeDuration, jyotishId });

            $.ajax({
                url: BaseUrl + 'api/Jyotish/AddAppointmentSlot',
                type: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
                    'Content-Type': 'application/json',
                },
                data: JSON.stringify({
                    date: date,
                    timeFrom: timeFromFormatted, // Use the formatted time
                    timeTo: timeToFormatted, // Use the formatted time
                    timeDuration: parseInt(timeDuration, 10),
                    jyotishId: parseInt(jyotishId, 10)
                }),
                success: function (response) {
                    if (response.status === 200) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Appointment slot added successfully.',
                            icon: 'success',
                            confirmButtonText: 'Ok'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: response.message || 'Failed to add appointment slot.',
                            icon: 'error',
                            confirmButtonText: 'Close'
                        });
                    }
                },
                error: function (xhr) {
                    console.error("Error:", xhr.responseText);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to add appointment slot: ' + xhr.responseText,
                        icon: 'error',
                        confirmButtonText: 'Close'
                    });
                }
            });
        });



        // Fetch and display the appointment slots
        $.ajax({
            url: BaseUrl +`api/Jyotish/GetAllAppointmentSlot?Id=${localStorage.getItem('Id')}`,
            type: 'GET',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
                'Content-Type': 'application/json',
            },
            success: function (res) {
                $('tbody').empty(); // Clear the table body first

                $.each(res.data, function (index, item) {
                    const formattedDate = new Date(item.date).toLocaleDateString(); // Format the date

                    // Loop through each slot in the slotList
                    $.each(item.slotList, function (slotIndex, slot) {
                        $('tbody').append(`<tr>
                        <td>${index = index + 1}</td>
                        <td>${formattedDate}</td>
                        <td>${slot.timeDuration} minutes</td>
                        <td>${slot.timeFrom}</td>
                        <td>${slot.timeTo}</td>
                        <td>${slot.status}</td>
                        <td style='cursor:pointer;'>
                            <a class="editfeature"
                               data-id="${slot.id}"
                               data-date="${formattedDate}"
                               data-timefrom="${slot.timeFrom}"
                               data-timeto="${slot.timeTo}"
                               data-duration="${slot.timeDuration}">
                                <i class="fa-solid fa-pen-to-square text-success"></i>
                            </a>
                                <a id="deletebtn"
                                   data-id="${slot.id}">
                                    <i class="fa-solid fa-trash text-success"></i>
                                </a>
                        </td>
                    </tr>`);
                    });
                });

                $('#DataTable').DataTable(); // Initialize the DataTable after adding all rows
            },
            error: function (error) {
                console.error(error);
            }
        });

        // Handle edit button click
        $(document).on('click', '.editfeature', function () {
            const id = $(this).data('id');
            const date = $(this).data('date'); // Assuming this is in MM/DD/YYYY format
            const timeFrom = $(this).data('timefrom');
            const timeTo = $(this).data('timeto');
            const timeDuration = $(this).data('duration');
             
            // Convert date from MM/DD/YYYY to YYYY-MM-DD
            const dateParts = date.split('/');
            const formattedDate = `${dateParts[2]}-${dateParts[0].padStart(2, '0')}-${dateParts[1].padStart(2, '0')}`; // YYYY-MM-DD

            // Fill the form fields with the selected slot data
            $("#id").val(id);
            $("#date").val(formattedDate); // Set the formatted date
            $("#timeFrom").val(timeFrom);
            $("#timeTo").val(timeTo);
            $("#timeDuration").val(timeDuration);

            // Show the update button and hide the submit button
            $('#btnupdate').show();
            $('#btnsubmit').hide();
        });

        // Update Appointment Slot
        // Update Appointment Slot
        // Update Appointment Slot
        $("#btnupdate").on('click', function (e) {
            e.preventDefault();
             
            const id = $("#id").val();
            const date = $("#date").val(); // Ensure this is in YYYY-MM-DD format
            const timeFrom = $("#timeFrom").val(); // Get the time value
            const timeTo = $("#timeTo").val(); // Get the time value
            const timeDuration = $("#timeDuration").val();
            const jyotishId = localStorage.getItem('Id'); // Hidden field

            // Validate required fields
            if (!date || !timeFrom || !timeTo || !timeDuration) {
                Swal.fire({
                    title: 'Error!',
                    text: 'All fields are required for updating.',
                    icon: 'error',
                    confirmButtonText: 'Close'
                });
                return;
            }

            // Ensure time is formatted correctly with seconds
            const timeFromFormatted = timeFrom; // Append seconds for HH:mm:ss
            const timeToFormatted = timeTo ; // Append seconds for HH:mm:ss

            // Debugging: Log the values being sent
            console.log('Sending data:', {
                id: id,
                date: date, // Ensure this is in YYYY-MM-DD format
                timeFrom: timeFromFormatted, // Ensure this is in HH:mm:ss format
                timeTo: timeToFormatted, // Ensure this is in HH:mm:ss format
                timeDuration: parseInt(timeDuration, 10),
                jyotishId: localStorage.getItem('Id')
            });

            // Update the appointment slot
            $.ajax({
                url: BaseUrl +'api/Jyotish/UpdateAppointmentSlot',
                type: 'POST', // Change method to PUT for updates
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
                    'Content-Type': 'application/json',
                },
                data: JSON.stringify({
                    id: id,
                    date: date, // Ensure date is in YYYY-MM-DD format
                    timeFrom: timeFromFormatted, // Ensure this is in HH:mm:ss format
                    timeTo: timeToFormatted, // Ensure this is in HH:mm:ss format
                    timeDuration: parseInt(timeDuration, 10),
                    jyotishId: jyotishId
                }),
                success: function (response) {
                    if (response.status == 200) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Appointment slot updated successfully.',
                            icon: 'success',
                            confirmButtonText: 'Ok'
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error:", xhr.responseText);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to update appointment slot.',
                        icon: 'error',
                        confirmButtonText: 'Close'
                    });
                }
            });
        });


        $(document).on('click', '#deletebtn', function () {
            const id = $(this).data('id'); // Get the data-id attribute
            console.log('ID to delete:', id); // Debugging: Log the ID

            $.ajax({
                url: BaseUrl+`api/Jyotish/DeleteAppointmentSlot?Id=${id}`,
                type: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem("Token2")}`,
                },
                success: function (response) {
                    if (response.status == 200) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Appointment slot DELETED successfully.',
                            icon: 'success',
                            confirmButtonText: 'Ok'
                        }).then(() => {
                            window.location.reload(); // Reload the page to reflect the deletion
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error:", xhr.responseText);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to delete appointment slot.',
                        icon: 'error',
                        confirmButtonText: 'Close'
                    });
                }
            });
        });


    });
</script>

<script>
    const dateContainers = document.querySelectorAll('.input-container');
    dateContainers.forEach(dateContainer => {
        const dateInput = dateContainer.querySelector('.date-field');
        if (dateInput) {
            dateContainer.addEventListener('click', function (event) {
                dateInput.select();
            });
        }
    });

    /* ----------------------------------------------------------------------------- */
    /* -- Automatically set the date for check-in (today) and checkout (tomorrow) -- */
    /* ----------------------------------------------------------------------------- */
    document.addEventListener("DOMContentLoaded", function () {
        const dateCheckin = document.getElementById("date-checkin");
        const dateCheckout = document.getElementById("date-checkout");
        const today = new Date();
        const tomorrow = new Date(today); tomorrow.setDate(tomorrow.getDate() + 1);
        dateCheckin.valueAsDate = today;
        dateCheckout.valueAsDate = tomorrow;
        dateCheckin.addEventListener("input", function () {
            const checkinDate = dateCheckin.valueAsDate;
            const checkoutDate = dateCheckout.valueAsDate;
            if (checkinDate > checkoutDate) {
                const newCheckoutDate = new Date(checkinDate);
                newCheckoutDate.setDate(newCheckoutDate.getDate() + 1);
                dateCheckout.valueAsDate = newCheckoutDate;
            }
        });
        dateCheckout.addEventListener("input", function () {
            const checkinDate = dateCheckin.valueAsDate;
            const checkoutDate = dateCheckout.valueAsDate;
            if (checkoutDate < checkinDate) {
                const newCheckinDate = new Date(checkoutDate);
                newCheckinDate.setDate(newCheckinDate.getDate() - 1);
                dateCheckin.valueAsDate = newCheckinDate;
            }
        });
    });


    const today = new Date();

const formattedToday = today.toISOString().split('T')[0];

// Set the min and max attributes on the date input
    const dateFrom = document.getElementById('date-checkin');
    const dateTo = document.getElementById('date-checkout');
dateFrom.setAttribute('min', formattedToday); // Current date
dateFrom.addEventListener("input",function(){
        let fromDate = new Date(this.value);
        dateTo.setAttribute('min', this.value);
        const maxDate = new Date(fromDate);
        maxDate.setDate(fromDate.getDate() + 90); // Add 90 days

        // Format the max date as YYYY-MM-DD
        const formattedMaxDate = maxDate.toISOString().split('T')[0];
        dateTo.setAttribute('max', formattedMaxDate);
        dateTo.value = formattedMaxDate

})
</script>