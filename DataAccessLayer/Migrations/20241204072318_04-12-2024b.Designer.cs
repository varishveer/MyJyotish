// <auto-generated />
using System;
using DataAccessLayer.DbServices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241204072318_04-12-2024b")]
    partial class _04122024b
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ModelAccessLayer.Models.AdminModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.AppointmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ArrivedStatus")
                        .HasColumnType("int");

                    b.Property<int?>("BookMark")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.AppointmentSlotModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.ToTable("AppointmentSlots");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.CallingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("UserId");

                    b.ToTable("CallingRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ChatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mssDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receiverId")
                        .HasColumnType("int");

                    b.Property<string>("sendBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("senderId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ChatedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FirstMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatedUser");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ChattingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatingRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ClientMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UId")
                        .HasColumnType("int");

                    b.Property<string>("dob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UId");

                    b.ToTable("ClientMembers");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.CountryCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("country")
                        .HasColumnType("int");

                    b.Property<int>("countryCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("country")
                        .IsUnique();

                    b.ToTable("CountryCode");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.DepartmentPagesValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DepartmentPagesAccess");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressProof")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressProofMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressProofStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdProof")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdProofMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdProofStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertificateMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertificateStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenthCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenthCertificateMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenthCertificateStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwelveCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwelveCertificateMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwelveCertificateStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JId")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Employees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("levels")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Department");

                    b.HasIndex("levels");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.EmployeesAccessPages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("pageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pagesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeeAccessPages");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.EmployeesDocs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employees")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("employees");

                    b.ToTable("EmployeeDocs");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ExpertiseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpertiseRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.InterviewFeedbackModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ApprovedStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("JyotishId");

                    b.ToTable("InterviewFeedback");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishGalleryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.ToTable("JyotishGallery");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternateMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Appointment")
                        .HasColumnType("bit");

                    b.Property<int?>("AppointmentCharges")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwordsAndAchievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Call")
                        .HasColumnType("bit");

                    b.Property<int?>("CallCharges")
                        .HasColumnType("int");

                    b.Property<bool?>("Chat")
                        .HasColumnType("bit");

                    b.Property<int?>("ChatCharges")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Expertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("Otp")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.Property<bool?>("Pooja")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SuccessRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("TimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TimeTo")
                        .HasColumnType("time");

                    b.Property<int?>("countryCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("countryCode");

                    b.ToTable("JyotishRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishPaymentRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.ToTable("JyotishPaymentRecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishRatingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("UserId");

                    b.ToTable("JyotishRating");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishTempRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AboutSection")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AddressSection")
                        .HasColumnType("bit");

                    b.Property<string>("AlternateMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Appointment")
                        .HasColumnType("bit");

                    b.Property<int?>("AppointmentCharges")
                        .HasColumnType("int");

                    b.Property<bool>("AvailbilitySection")
                        .HasColumnType("bit");

                    b.Property<string>("AwordsAndAchievement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BasicSection")
                        .HasColumnType("bit");

                    b.Property<bool?>("Call")
                        .HasColumnType("bit");

                    b.Property<int?>("CallCharges")
                        .HasColumnType("int");

                    b.Property<bool?>("Chat")
                        .HasColumnType("bit");

                    b.Property<int?>("ChatCharges")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Expertise")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.Property<bool?>("Pooja")
                        .HasColumnType("bit");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("TimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TimeTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("jyotishTempRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishUserAttachmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("JyotishId");

                    b.HasIndex("MemberId");

                    b.HasIndex("UserId");

                    b.ToTable("JyotishUserAttachmentRecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishVideosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.ToTable("JyotishVideos");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.LanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ManageSubscriptionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceCount")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("ManageSubscriptionModels");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.PoojaListModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PoojaList");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.PoojaRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutGod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PoojaRecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ProblemSolutionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("memberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("memberId");

                    b.ToTable("ProblemSolution");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SliderImagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookPoojaCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoojaList")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SlotBookingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotBooking");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SlotModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SpecializationListModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecializationList");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SubsciptionManagementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JyotishId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("PackageManager");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SubscriptionFeaturesModel", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("FeatureId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SubscriptionModel", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("Gst")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.TeamMemberModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JyotishId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamMemberRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Otp")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pincode")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("TimeOfBirth")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.UserPaymentRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentRecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.UserWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("WalletAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("UserWallets");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.WalletHistoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("JId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UId")
                        .HasColumnType("int");

                    b.Property<long?>("amount")
                        .HasColumnType("bigint");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JId");

                    b.HasIndex("UId");

                    b.ToTable("WalletHistroy");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.jyotishWallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("WalletAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("jyotishId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("jyotishId");

                    b.ToTable("JyotishWallets");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.levels", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("levelsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.redeamCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("ReadeamCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<float>("discount")
                        .HasColumnType("real");

                    b.Property<float>("discountAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("jyotishId")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("jyotishId");

                    b.ToTable("RedeamCode");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.AppointmentModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "JyotishRecord")
                        .WithMany("AppointmentRecord")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.AppointmentSlotModel", "AppointmentSlotData")
                        .WithMany("AppointmentData")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.UserModel", "UserRecord")
                        .WithMany("AppointmentRecord")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentSlotData");

                    b.Navigation("JyotishRecord");

                    b.Navigation("UserRecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.AppointmentSlotModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "JyotishData")
                        .WithMany("AppointmentSlotData")
                        .HasForeignKey("JyotishId");

                    b.Navigation("JyotishData");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.CallingModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("CallingModelRecord")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("CallingModelRecord")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ChatedUser", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("ChatedUserRecord")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("ChatedUserRecord")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ChattingModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("ChattingModelRecord")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("ChattingModelRecord")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ClientMembers", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.UserModel", "user")
                        .WithMany("memebers")
                        .HasForeignKey("UId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.CountryCode", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.Country", "countryobj")
                        .WithOne("code")
                        .HasForeignKey("ModelAccessLayer.Models.CountryCode", "country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("countryobj");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.DocumentModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithOne("DocumentModel")
                        .HasForeignKey("ModelAccessLayer.Models.DocumentModel", "JId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Employees", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.Department", "departmentRelation")
                        .WithMany("employees")
                        .HasForeignKey("Department")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.levels", "LevelsRelation")
                        .WithMany("employees")
                        .HasForeignKey("levels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelsRelation");

                    b.Navigation("departmentRelation");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.EmployeesDocs", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.Employees", "employeeRecord")
                        .WithMany("employeeDocs")
                        .HasForeignKey("employees")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employeeRecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.InterviewFeedbackModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.SlotModel", "Slot")
                        .WithMany("Feedback")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("Feedback")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishGalleryModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("JyotishGallery")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.CountryCode", "countryCoderecord")
                        .WithMany("jyotish")
                        .HasForeignKey("countryCode");

                    b.Navigation("countryCoderecord");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishPaymentRecordModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("jyotishPaymentRecords")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishRatingModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("JyotishRating")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("JyotishRating")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishUserAttachmentModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.AppointmentModel", "Appointment")
                        .WithMany("JyotishUserAttachmentRecords")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("JyotishUserAttachmentRecords")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.ClientMembers", "Member")
                        .WithMany("Attachment")
                        .HasForeignKey("MemberId");

                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("JyotishUserAttachmentRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Jyotish");

                    b.Navigation("Member");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishVideosModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "Jyotish")
                        .WithMany("JyotishVideos")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ManageSubscriptionModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.SubscriptionFeaturesModel", "Feature")
                        .WithMany("ManageSubscription")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.SubscriptionModel", "Subscription")
                        .WithMany("ManageSubscription")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ProblemSolutionModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.AppointmentModel", "Appointment")
                        .WithMany("Solution")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.ClientMembers", "Member")
                        .WithMany("Solution")
                        .HasForeignKey("memberId");

                    b.Navigation("Appointment");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SlotBookingModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "JyotishRecords")
                        .WithMany("Slots")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.SlotModel", "SlotRecords")
                        .WithMany("SlotBookingRecords")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JyotishRecords");

                    b.Navigation("SlotRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SubsciptionManagementModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "jyotish")
                        .WithMany("subscriptionManage")
                        .HasForeignKey("JyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelAccessLayer.Models.SubscriptionModel", "subscription")
                        .WithMany("subscriptionManage")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jyotish");

                    b.Navigation("subscription");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.UserPaymentRecordModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("UserPaymentRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.UserWallet", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.UserModel", "User")
                        .WithMany("UserRecord")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.WalletHistoryModel", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "jyotish")
                        .WithMany("JytoishWalletHistoryRecord")
                        .HasForeignKey("JId");

                    b.HasOne("ModelAccessLayer.Models.UserModel", "Users")
                        .WithMany("UserWalletHistoryRecords")
                        .HasForeignKey("UId");

                    b.Navigation("Users");

                    b.Navigation("jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.jyotishWallet", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "jyotish")
                        .WithMany("JyotishRecord")
                        .HasForeignKey("jyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.redeamCode", b =>
                {
                    b.HasOne("ModelAccessLayer.Models.JyotishModel", "jyotish")
                        .WithMany("redeamCode")
                        .HasForeignKey("jyotishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.AppointmentModel", b =>
                {
                    b.Navigation("JyotishUserAttachmentRecords");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.AppointmentSlotModel", b =>
                {
                    b.Navigation("AppointmentData");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.ClientMembers", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Country", b =>
                {
                    b.Navigation("code")
                        .IsRequired();
                });

            modelBuilder.Entity("ModelAccessLayer.Models.CountryCode", b =>
                {
                    b.Navigation("jyotish");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Department", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.Employees", b =>
                {
                    b.Navigation("employeeDocs");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.JyotishModel", b =>
                {
                    b.Navigation("AppointmentRecord");

                    b.Navigation("AppointmentSlotData");

                    b.Navigation("CallingModelRecord");

                    b.Navigation("ChatedUserRecord");

                    b.Navigation("ChattingModelRecord");

                    b.Navigation("DocumentModel")
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("JyotishGallery");

                    b.Navigation("JyotishRating");

                    b.Navigation("JyotishRecord");

                    b.Navigation("JyotishUserAttachmentRecords");

                    b.Navigation("JyotishVideos");

                    b.Navigation("JytoishWalletHistoryRecord");

                    b.Navigation("Slots");

                    b.Navigation("jyotishPaymentRecords");

                    b.Navigation("redeamCode");

                    b.Navigation("subscriptionManage");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SlotModel", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("SlotBookingRecords");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SubscriptionFeaturesModel", b =>
                {
                    b.Navigation("ManageSubscription");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.SubscriptionModel", b =>
                {
                    b.Navigation("ManageSubscription");

                    b.Navigation("subscriptionManage");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.UserModel", b =>
                {
                    b.Navigation("AppointmentRecord");

                    b.Navigation("CallingModelRecord");

                    b.Navigation("ChatedUserRecord");

                    b.Navigation("ChattingModelRecord");

                    b.Navigation("JyotishRating");

                    b.Navigation("JyotishUserAttachmentRecords");

                    b.Navigation("UserPaymentRecords");

                    b.Navigation("UserRecord");

                    b.Navigation("UserWalletHistoryRecords");

                    b.Navigation("memebers");
                });

            modelBuilder.Entity("ModelAccessLayer.Models.levels", b =>
                {
                    b.Navigation("employees");
                });
#pragma warning restore 612, 618
        }
    }
}
